{"version":3,"file":"ReconnectingWebSocket.js","sourceRoot":"","sources":["../../../src/Websocket/ReconnectingWebSocket/ReconnectingWebSocket.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;AAEH,gCAAgC;AAEhC,qCAA0E;AA0B1E;IAyYC,YAAY,GAAgB,EAAE,UAAyB,EAAE,EAAE,SAA6B;QAxYhF,iBAAY,GAAG,KAAK,CAAC;QAErB,eAAU,GAAiB;YAClC,KAAK,EAAE,EAAE;YACT,OAAO,EAAE,EAAE;YACX,IAAI,EAAE,EAAE;YACR,KAAK,EAAE,EAAE;SACT,CAAC;QAGM,qBAAgB,GAAG,IAAI,CAAC;QAIf,mBAAc,GAAG,IAAI,GAAG,CAA+B;YACvE,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACrC,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvC,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvC,CAAC,SAAS,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC3C,CAAC,CAAC;QAII,YAAO,GAAiC,SAAS,CAAC;QAIlD,YAAO,GAA4B,SAAS,CAAC;QAI7C,cAAS,GAAmC,SAAS,CAAC;QAKtD,WAAM,GAA4B,SAAS,CAAC;QAkC3C,gBAAW,GAAG,MAAM,CAAC;QAcrB,gBAAW,GAAG,CAAC,CAAC,CAAC;QAqTxB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,QAAQ,EAAE,CAAC;QAEhB,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACvC,IAAI,CAAC,QAAQ,GAAkB;gBAC9B,oBAAoB,EAAE,KAAK;gBAC3B,oBAAoB,EAAE,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI;gBACjD,SAAS,EAAE,IAAI;gBACf,2BAA2B,EAAE,GAAG;gBAChC,iBAAiB,EAAE,IAAI;gBACvB,UAAU,EAAE,QAAQ;gBACpB,KAAK,EAAE,KAAK;aACZ,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACzB,CAAC;IACF,CAAC;IArXD,MAAM,KAAK,MAAM;QAChB,MAAM,CAAC,CAAC,CAAC;IACV,CAAC;IAED,IAAI,MAAM;QACT,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC;IACrC,CAAC;IAED,MAAM,KAAK,OAAO;QACjB,MAAM,CAAC,CAAC,CAAC;IACV,CAAC;IAED,IAAI,OAAO;QACV,MAAM,CAAC,qBAAqB,CAAC,OAAO,CAAC;IACtC,CAAC;IAED,MAAM,KAAK,UAAU;QACpB,MAAM,CAAC,CAAC,CAAC;IACV,CAAC;IAED,IAAI,UAAU;QACb,MAAM,CAAC,qBAAqB,CAAC,UAAU,CAAC;IACzC,CAAC;IAED,MAAM,KAAK,IAAI;QACd,MAAM,CAAC,CAAC,CAAC;IACV,CAAC;IAED,IAAI,IAAI;QACP,MAAM,CAAC,qBAAqB,CAAC,IAAI,CAAC;IACnC,CAAC;IAID,IAAI,UAAU;QACb,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;IAC1D,CAAC;IAED,IAAI,UAAU,CAAC,KAAa;QAC3B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YAEd,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,KAAK,CAAC;QAC7B,CAAC;IACF,CAAC;IAOD,IAAI,UAAU;QACb,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;IACtC,CAAC;IAQD,IAAI,cAAc;QACjB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/C,CAAC;IAMD,IAAI,UAAU;QACb,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC;IAC5C,CAAC;IAOD,IAAI,QAAQ;QACX,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;IAC1C,CAAC;IAKD,IAAI,UAAU;QACb,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,qBAAqB,CAAC,UAAU,CAAC;IAC1E,CAAC;IAKD,IAAI,GAAG;QACN,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;IACrC,CAAC;IAEO,WAAW;QAClB,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;IACtB,CAAC;IAKO,aAAa;QACpB,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QAC5B,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YACnD,IAAI,CAAC,GAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC3C,CAAC;IACF,CAAC;IAEO,QAAQ;QACf,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC;QACR,CAAC;QACD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QAEzB,MAAM,EACL,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EACrC,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EACnD,SAAS,GAAG,qBAAqB,CAAC,kBAAkB,EAAE,GACtD,GAAG,IAAI,CAAC,QAAQ,CAAC;QAElB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,UAAU,CAAC,CAAC,CAAC;YACpC,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;YACvE,MAAM,CAAC;QACR,CAAC;QAED,IAAI,CAAC,WAAW,EAAE,CAAC;QAEnB,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACzC,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,EAAE,CAAC,CAAC,CAAC,qBAAqB,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACnD,MAAM,KAAK,CAAC,uCAAuC,CAAC,CAAC;QACtD,CAAC;QACD,IAAI,CAAC,KAAK,EAAE;aACV,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACvC,IAAI,CAAC,GAAG,CAAC,EAAE;YACX,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,EAAC,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC,UAAU,EAAC,CAAC,CAAC;YAC1D,IAAI,CAAC,GAAG,GAAG,IAAI,SAAS,CAAC,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;YAE/C,IAAI,CAAC,GAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;YACxC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;YAC1B,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,iBAAiB,CAAC,CAAC;QACnF,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,MAAM,CAAC,GAAG,MAAa;QAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;YAEzB,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC;QAChC,CAAC;IACF,CAAC;IAEO,WAAW,CAAC,IAAa,EAAE,MAAe;QACjD,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACnC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACf,MAAM,CAAC;QACR,CAAC;QACD,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC;YACJ,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAC7B,IAAI,CAAC,YAAY,CAAC,IAAI,mBAAU,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;QACvD,CAAC;QAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAEjB,CAAC;IACF,CAAC;IAEO,aAAa;QACpB,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;YAC1B,MAAM,EACL,2BAA2B,GAAG,IAAI,CAAC,QAAQ,CAAC,2BAA2B,EACvE,oBAAoB,GAAG,IAAI,CAAC,QAAQ,CAAC,oBAAoB,EACzD,oBAAoB,GAAG,IAAI,CAAC,QAAQ,CAAC,oBAAoB,GACzD,GAAG,IAAI,CAAC,QAAQ,CAAC;YAElB,KAAK;gBACJ,oBAAoB,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,EAAE,2BAA2B,CAAC,CAAC;YACpF,EAAE,CAAC,CAAC,KAAK,GAAG,oBAAoB,CAAC,CAAC,CAAC;gBAClC,KAAK,GAAG,oBAAoB,CAAC;YAC9B,CAAC;QACF,CAAC;QACD,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACjC,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IAKO,WAAW,CAAC,WAAwB;QAC3C,EAAE,CAAC,CAAC,OAAO,WAAW,KAAK,QAAQ,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACrC,CAAC;QACD,EAAE,CAAC,CAAC,OAAO,WAAW,KAAK,UAAU,CAAC,CAAC,CAAC;YACvC,MAAM,GAAG,GAAG,WAAW,EAAE,CAAC;YAC1B,EAAE,CAAC,CAAC,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC7B,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC1B,MAAM,CAAC,GAAG,CAAC;YACZ,CAAC;QACF,CAAC;QACD,MAAM,KAAK,CAAC,aAAa,CAAC,CAAC;IAC5B,CAAC;IAEO,YAAY,CAAC,KAAiB;QACrC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAE3B,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC;QACD,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IAC5D,CAAC;IAEO,YAAY,CAAC,KAAiB;QACrC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;QAC1C,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,KAAK,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAEjF,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC;QACD,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;QACpC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QAE3D,IAAI,CAAC,QAAQ,EAAE,CAAC;IACjB,CAAC;IAEO,cAAc,CAAC,KAAmB;QACzC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QAE7B,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACvB,CAAC;QACD,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IAC9D,CAAC;IAEO,WAAW,CAAC,KAAY;QAC/B,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAC1B,MAAM,EAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE5D,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,SAAS,CAAC,CAAC;QAEtE,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;QAElC,IAAI,CAAC,GAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;QAExC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC;QACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3D,CAAC;IAEO,cAAc;QACrB,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QAC7B,IAAI,CAAC,YAAY,CAAC,IAAI,mBAAU,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAC3D,CAAC;IAEO,UAAU,CAAC,GAA6B;QAC/C,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,GAAG,KAAK,QAAQ,IAAI,OAAO,GAAG,KAAK,UAAU,CAAC,IAAI,OAAO,GAAG,CAAC,IAAI,KAAK,UAAU,CAAC;IAC1G,CAAC;IAKO,gBAAgB;QACvB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACf,MAAM,CAAC;QACR,CAAC;QACD,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QAC/B,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YACnD,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC7C,CAAC;IACF,CAAC;IAEO,KAAK;QACZ,MAAM,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;YAC5B,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACJ,CAAC;IAKM,gBAAgB,CACtB,IAAO,EACP,QAAiD;QAEjD,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAE3B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACtC,CAAC;IACF,CAAC;IAMM,KAAK,CAAC,IAAa,EAAE,MAAe;QAC1C,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,UAAU,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC;QACR,CAAC;QACD,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAC9B,CAAC;IAEO,MAAM,CAAC,kBAAkB;QAChC,EAAE,CAAC,CAAC,OAAO,SAAS,KAAK,WAAW,CAAC,CAAC,CAAC;YAEtC,MAAM,CAAC,SAAS,CAAC;QAClB,CAAC;IACF,CAAC;IAEM,MAAM,CAAC,WAAW,CAAC,CAAM;QAC/B,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,IAAI,CAAC,CAAC,OAAO,KAAK,CAAC,CAAC;IACnD,CAAC;IAMM,SAAS,CAAC,IAAa,EAAE,MAAe;QAC9C,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;QACtB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,UAAU,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACtD,IAAI,CAAC,QAAQ,EAAE,CAAC;QACjB,CAAC;QACD,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;IACjB,CAAC;IAKM,mBAAmB,CACzB,IAAO,EACP,QAAiD;QAEjD,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAE3B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC;QAC3E,CAAC;IACF,CAAC;IAKM,IAAI,CAAC,IAAmD;QAC9D,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACd,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrB,CAAC;IACF,CAAC;CAuBD;AA9ZD,wCA8ZC","sourcesContent":["/*!\r\n * Reconnecting BaseWebSocket\r\n * by Pedro Ladaria <pedro.ladaria@gmail.com>\r\n * https://github.com/pladaria/reconnecting-websocket\r\n * License MIT\r\n */\r\n\r\nimport * as WebSocket from \"ws\";\r\n\r\nimport {CloseEvent, ErrorEvent, Event, WebSocketEventMap} from './Events';\r\n\r\n/**\r\n * Returns true if given argument looks like a BaseWebSocket class\r\n */\r\n\r\nexport interface IReconOptions {\r\n\tWebSocket?: any;\r\n\tconnectionTimeout?: number;\r\n\tdebug?: boolean;\r\n\tmaxReconnectionDelay?: number;\r\n\tmaxRetries?: number;\r\n\tminReconnectionDelay?: number;\r\n\tminUptime?: number;\r\n\treconnectionDelayGrowFactor?: number;\r\n}\r\n\r\nexport type UrlProvider = string | (() => string) | (() => Promise<string>);\r\n\r\nexport type ListenersMap = {\r\n\terror: Array<((event: ErrorEvent) => void)>;\r\n\tmessage: Array<((event: MessageEvent) => void)>;\r\n\topen: Array<((event: Event) => void)>;\r\n\tclose: Array<((event: CloseEvent) => void)>;\r\n};\r\n\r\nexport default class ReconnectingWebSocket {\r\n\tprivate _connectLock = false;\r\n\tprivate _connectTimeout: any;\r\n\tprivate _listeners: ListenersMap = {\r\n\t\terror: [],\r\n\t\tmessage: [],\r\n\t\topen: [],\r\n\t\tclose: [],\r\n\t};\r\n\tprivate readonly _options: IReconOptions;\r\n\tprivate readonly _protocols?: string | string[];\r\n\tprivate _shouldReconnect = true;\r\n\tprivate _uptimeTimeout: any;\r\n\tprivate readonly _url: UrlProvider;\r\n\tprivate _ws?: WebSocket;\r\n\tprivate readonly eventToHandler = new Map<keyof WebSocketEventMap, any>([\r\n\t\t['open', this._handleOpen.bind(this)],\r\n\t\t['close', this._handleClose.bind(this)],\r\n\t\t['error', this._handleError.bind(this)],\r\n\t\t['message', this._handleMessage.bind(this)],\r\n\t]);\r\n\t/**\r\n\t * An event listener phoneNum be called when the BaseWebSocket connection's readyState changes phoneNum CLOSED\r\n\t */\r\n\tpublic onclose?: (event: CloseEvent) => void = undefined;\r\n\t/**\r\n\t * An event listener phoneNum be called when an error occurs\r\n\t */\r\n\tpublic onerror?: (event: Event) => void = undefined;\r\n\t/**\r\n\t * An event listener phoneNum be called when a message is received from the server\r\n\t */\r\n\tpublic onmessage?: (event: MessageEvent) => void = undefined;\r\n\t/**\r\n\t * An event listener phoneNum be called when the BaseWebSocket connection's readyState changes phoneNum OPEN;\r\n\t * this indicates that the connection is ready phoneNum send and receive data\r\n\t */\r\n\tpublic onopen?: (event: Event) => void = undefined;\r\n\r\n\tstatic get CLOSED() {\r\n\t\treturn 3;\r\n\t}\r\n\r\n\tget CLOSED() {\r\n\t\treturn ReconnectingWebSocket.CLOSED;\r\n\t}\r\n\r\n\tstatic get CLOSING() {\r\n\t\treturn 2;\r\n\t}\r\n\r\n\tget CLOSING() {\r\n\t\treturn ReconnectingWebSocket.CLOSING;\r\n\t}\r\n\r\n\tstatic get CONNECTING() {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tget CONNECTING() {\r\n\t\treturn ReconnectingWebSocket.CONNECTING;\r\n\t}\r\n\r\n\tstatic get OPEN() {\r\n\t\treturn 1;\r\n\t}\r\n\r\n\tget OPEN() {\r\n\t\treturn ReconnectingWebSocket.OPEN;\r\n\t}\r\n\r\n\tprivate _binaryType = 'blob';\r\n\r\n\tget binaryType(): string {\r\n\t\treturn this._ws ? this._ws.binaryType : this._binaryType;\r\n\t}\r\n\r\n\tset binaryType(value: string) {\r\n\t\tthis._binaryType = value;\r\n\t\tif (this._ws) {\r\n\t\t\t// @ts-ignore\r\n\t\t\tthis._ws.binaryType = value;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _retryCount = -1;\r\n\r\n\t/**\r\n\t * Returns the number or connection retries\r\n\t */\r\n\tget retryCount(): number {\r\n\t\treturn Math.max(this._retryCount, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * The number of bytes of data that have been queued using calls phoneNum send() but not yet\r\n\t * transmitted phoneNum the network. This value resets phoneNum zero once all queued data has been sent.\r\n\t * This value does not reset phoneNum zero when the connection is closed; if you keep calling send(),\r\n\t * this will continue phoneNum climb. Read only\r\n\t */\r\n\tget bufferedAmount(): number {\r\n\t\treturn this._ws ? this._ws.bufferedAmount : 0;\r\n\t}\r\n\r\n\t/**\r\n\t * The extensions selected by the server. This is currently only the empty string or a list of\r\n\t * extensions as negotiated by the connection\r\n\t */\r\n\tget extensions(): string {\r\n\t\treturn this._ws ? this._ws.extensions : '';\r\n\t}\r\n\r\n\t/**\r\n\t * A string indicating the name of the sub-protocol the server selected;\r\n\t * this will be one of the strings specified in the protocols parameter when creating the\r\n\t * BaseWebSocket object\r\n\t */\r\n\tget protocol(): string {\r\n\t\treturn this._ws ? this._ws.protocol : '';\r\n\t}\r\n\r\n\t/**\r\n\t * The current state of the connection; this is one of the Ready state constants\r\n\t */\r\n\tget readyState(): number {\r\n\t\treturn this._ws ? this._ws.readyState : ReconnectingWebSocket.CONNECTING;\r\n\t}\r\n\r\n\t/**\r\n\t * The URL as resolved by the constructor\r\n\t */\r\n\tget url(): string {\r\n\t\treturn this._ws ? this._ws.url : '';\r\n\t}\r\n\r\n\tprivate _acceptOpen() {\r\n\t\tthis._retryCount = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Assign event listeners phoneNum BaseWebSocket instance\r\n\t */\r\n\tprivate _addListeners() {\r\n\t\tthis._debug('addListeners');\r\n\t\tfor (const [type, handler] of this.eventToHandler) {\r\n\t\t\tthis._ws!.addEventListener(type, handler);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _connect() {\r\n\t\tif (this._connectLock) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._connectLock = true;\r\n\r\n\t\tconst {\r\n\t\t\tmaxRetries = this._options.maxRetries,\r\n\t\t\tconnectionTimeout = this._options.connectionTimeout,\r\n\t\t\tWebSocket = ReconnectingWebSocket.getGlobalWebSocket(),\r\n\t\t} = this._options;\r\n\r\n\t\tif (this._retryCount >= maxRetries) {\r\n\t\t\tthis._debug('max retries reached', this._retryCount, '>=', maxRetries);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._retryCount++;\r\n\r\n\t\tthis._debug('connect', this._retryCount);\r\n\t\tthis._removeListeners();\r\n\t\tif (!ReconnectingWebSocket.isWebSocket(WebSocket)) {\r\n\t\t\tthrow Error('No valid BaseWebSocket class provided');\r\n\t\t}\r\n\t\tthis._wait()\r\n\t\t\t.then(() => this._getNextUrl(this._url))\r\n\t\t\t.then(url => {\r\n\t\t\t\tthis._debug('connect', {url, protocols: this._protocols});\r\n\t\t\t\tthis._ws = new WebSocket(url, this._protocols);\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tthis._ws!.binaryType = this._binaryType;\r\n\t\t\t\tthis._connectLock = false;\r\n\t\t\t\tthis._addListeners();\r\n\t\t\t\tthis._connectTimeout = setTimeout(() => this._handleTimeout(), connectionTimeout);\r\n\t\t\t});\r\n\t}\r\n\r\n\tprivate _debug(...params: any[]) {\r\n\t\tif (this._options.debug) {\r\n\t\t\t// tslint:disable-next-line\r\n\t\t\tconsole.log('RWS>', ...params);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _disconnect(code?: number, reason?: string) {\r\n\t\tclearTimeout(this._connectTimeout);\r\n\t\tif (!this._ws) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._removeListeners();\r\n\t\ttry {\r\n\t\t\tthis._ws.close(code, reason);\r\n\t\t\tthis._handleClose(new CloseEvent(code, reason, this));\r\n\t\t} catch (error) {\r\n\t\t\t// ignore\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _getNextDelay() {\r\n\t\tlet delay = 0;\r\n\t\tif (this._retryCount > 0) {\r\n\t\t\tconst {\r\n\t\t\t\treconnectionDelayGrowFactor = this._options.reconnectionDelayGrowFactor,\r\n\t\t\t\tminReconnectionDelay = this._options.minReconnectionDelay,\r\n\t\t\t\tmaxReconnectionDelay = this._options.maxReconnectionDelay,\r\n\t\t\t} = this._options;\r\n\r\n\t\t\tdelay =\r\n\t\t\t\tminReconnectionDelay + Math.pow(this._retryCount - 1, reconnectionDelayGrowFactor);\r\n\t\t\tif (delay > maxReconnectionDelay) {\r\n\t\t\t\tdelay = maxReconnectionDelay;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._debug('next delay', delay);\r\n\t\treturn delay;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Promise<string>\r\n\t */\r\n\tprivate _getNextUrl(urlProvider: UrlProvider): Promise<string> {\r\n\t\tif (typeof urlProvider === 'string') {\r\n\t\t\treturn Promise.resolve(urlProvider);\r\n\t\t}\r\n\t\tif (typeof urlProvider === 'function') {\r\n\t\t\tconst url = urlProvider();\r\n\t\t\tif (typeof url === 'string') {\r\n\t\t\t\treturn Promise.resolve(url);\r\n\t\t\t}\r\n\t\t\tif (this._isPromise(url)) {\r\n\t\t\t\treturn url;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthrow Error('Invalid URL');\r\n\t}\r\n\r\n\tprivate _handleClose(event: CloseEvent) {\r\n\t\tthis._debug('close event');\r\n\r\n\t\tif (this.onclose) {\r\n\t\t\tthis.onclose(event);\r\n\t\t}\r\n\t\tthis._listeners.close.forEach(listener => listener(event));\r\n\t}\r\n\r\n\tprivate _handleError(event: ErrorEvent) {\r\n\t\tthis._debug('error event', event.message);\r\n\t\tthis._disconnect(undefined, event.message === 'TIMEOUT' ? 'timeout' : undefined);\r\n\r\n\t\tif (this.onerror) {\r\n\t\t\tthis.onerror(event);\r\n\t\t}\r\n\t\tthis._debug('exec error listeners');\r\n\t\tthis._listeners.error.forEach(listener => listener(event));\r\n\r\n\t\tthis._connect();\r\n\t}\r\n\r\n\tprivate _handleMessage(event: MessageEvent) {\r\n\t\tthis._debug('message event');\r\n\r\n\t\tif (this.onmessage) {\r\n\t\t\tthis.onmessage(event);\r\n\t\t}\r\n\t\tthis._listeners.message.forEach(listener => listener(event));\r\n\t}\r\n\r\n\tprivate _handleOpen(event: Event) {\r\n\t\tthis._debug('open event');\r\n\t\tconst {minUptime = this._options.minUptime} = this._options;\r\n\r\n\t\tclearTimeout(this._connectTimeout);\r\n\t\tthis._uptimeTimeout = setTimeout(() => this._acceptOpen(), minUptime);\r\n\r\n\t\tthis._debug('assign binary type');\r\n\t\t// @ts-ignore\r\n\t\tthis._ws!.binaryType = this._binaryType;\r\n\r\n\t\tif (this.onopen) {\r\n\t\t\tthis.onopen(event);\r\n\t\t}\r\n\t\tthis._listeners.open.forEach(listener => listener(event));\r\n\t}\r\n\r\n\tprivate _handleTimeout() {\r\n\t\tthis._debug('timeout event');\r\n\t\tthis._handleError(new ErrorEvent(Error('TIMEOUT'), this));\r\n\t}\r\n\r\n\tprivate _isPromise(obj: string | Promise<string>) {\r\n\t\treturn !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\r\n\t}\r\n\r\n\t/**\r\n\t * Remove event listeners phoneNum BaseWebSocket instance\r\n\t */\r\n\tprivate _removeListeners() {\r\n\t\tif (!this._ws) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._debug('removeListeners');\r\n\t\tfor (const [type, handler] of this.eventToHandler) {\r\n\t\t\tthis._ws.removeEventListener(type, handler);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _wait(): Promise<void> {\r\n\t\treturn new Promise(resolve => {\r\n\t\t\tsetTimeout(resolve, this._getNextDelay());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Register an event handler of a specific event type\r\n\t */\r\n\tpublic addEventListener<K extends keyof WebSocketEventMap>(\r\n\t\ttype: K,\r\n\t\tlistener: ((event: WebSocketEventMap[K]) => void),\r\n\t): void {\r\n\t\tif (this._listeners[type]) {\r\n\t\t\t// @ts-ignore\r\n\t\t\tthis._listeners[type].push(listener);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Closes the BaseWebSocket connection or connection attempt, if any. If the connection is already\r\n\t * CLOSED, this method does nothing\r\n\t */\r\n\tpublic close(code?: number, reason?: string) {\r\n\t\tthis._shouldReconnect = false;\r\n\t\tif (!this._ws || this._ws.readyState === this.CLOSED) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._ws.close(code, reason);\r\n\t}\r\n\r\n\tprivate static getGlobalWebSocket(): WebSocket | undefined {\r\n\t\tif (typeof WebSocket !== 'undefined') {\r\n\t\t\t// @ts-ignore\r\n\t\t\treturn WebSocket;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static isWebSocket(w: any) {\r\n\t\treturn typeof w === 'function' && w.CLOSING === 2;\r\n\t}\r\n\r\n\t/**\r\n\t * Closes the BaseWebSocket connection or connection attempt and connects again.\r\n\t * Resets retry counter;\r\n\t */\r\n\tpublic reconnect(code?: number, reason?: string) {\r\n\t\tthis._shouldReconnect = true;\r\n\t\tthis._retryCount = -1;\r\n\t\tif (!this._ws || this._ws.readyState === this.CLOSED) {\r\n\t\t\tthis._connect();\r\n\t\t}\r\n\t\tthis._disconnect(code, reason);\r\n\t\tthis._connect();\r\n\t}\r\n\r\n\t/**\r\n\t * Removes an event listener\r\n\t */\r\n\tpublic removeEventListener<K extends keyof WebSocketEventMap>(\r\n\t\ttype: K,\r\n\t\tlistener: ((event: WebSocketEventMap[K]) => void),\r\n\t): void {\r\n\t\tif (this._listeners[type]) {\r\n\t\t\t// @ts-ignore\r\n\t\t\tthis._listeners[type] = this._listeners[type].filter(l => l !== listener);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Enqueues the specified data phoneNum be transmitted phoneNum the server over the BaseWebSocket connection\r\n\t */\r\n\tpublic send(data: string | ArrayBuffer | Blob | ArrayBufferView) {\r\n\t\tif (this._ws) {\r\n\t\t\tthis._ws.send(data);\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor(url: UrlProvider, options: IReconOptions = {}, protocols?: string | string[]) {\r\n\t\tthis._url = url;\r\n\t\tthis._protocols = protocols;\r\n\t\tthis._options = options;\r\n\t\tthis._connect();\r\n\r\n\t\tif (Object.keys(options).length === 0) {\r\n\t\t\tthis._options = <IReconOptions>{\r\n\t\t\t\tmaxReconnectionDelay: 10000,\r\n\t\t\t\tminReconnectionDelay: 1000 + Math.random() * 4000,\r\n\t\t\t\tminUptime: 5000,\r\n\t\t\t\treconnectionDelayGrowFactor: 1.3,\r\n\t\t\t\tconnectionTimeout: 4000,\r\n\t\t\t\tmaxRetries: Infinity,\r\n\t\t\t\tdebug: false,\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tthis._options = options;\r\n\t\t}\r\n\t}\r\n\r\n}"]}