{"version":3,"file":"BotWebsocket.js","sourceRoot":"","sources":["../../src/Websocket/BotWebsocket.ts"],"names":[],"mappings":"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","sourcesContent":["import {default as ReconnectingWebSocket, IReconOptions} from \"./ReconnectingWebSocket/ReconnectingWebSocket\";\r\nimport {IStreamTickerRaw} from \"../ExchangeInfo/Interfaces/IStreamTickerRaw\";\r\nimport {Price} from \"../Transaction/Price\";\r\nimport {Ticker} from \"../ExchangeInfo/ticker\";\r\nimport {IBinanceOptions} from \"../Binance/Interfaces/IBinanceOptions\";\r\nimport {Rest} from \"../Rest/Rest\";\r\nimport {HttpError} from \"../Error/HttpError\";\r\nimport {IStreamRawKlineResponse} from \"../ExchangeInfo/Interfaces/ICandleBinance\";\r\nimport {Candle} from \"../ExchangeInfo/Candle\";\r\nimport {IOutboundAccountInfoStream} from \"../Account/Interfaces/IOutboundAccountInfoStream\";\r\nimport {IExecutionReportRaw} from \"../Account/Interfaces/IExecutionReportRaw\";\r\nimport {ExecutionReport} from \"../Account/ExecutionReport\";\r\nimport {OutboundAccountInfo} from \"../Account/OutboundAccountInfo\";\r\nimport Timer = NodeJS.Timer;\r\nimport {Binance} from \"..\";\r\nimport {ICandleWSOptions} from \"./ICandleWSOptions\";\r\n\r\nexport class BotWebsocket extends Rest{\r\n\tpublic static BASE: string = 'wss://stream.binance.com:9443/ws';\r\n\tpublic static CandleOpts: ICandleWSOptions = {\"partial_kline_1min_prior\": true, \"partial_kline_minimum_interval\": \"15m\"};\r\n\tprivate readonly _reconOptions: IReconOptions = <IReconOptions>{};\r\n\tprivate _ws: ReconnectingWebSocket;\r\n\r\n\tprivate _url: string;\r\n\r\n\tget url(): string {\r\n\t\treturn this._url;\r\n\t}\r\n\r\n\tset url(value: string) {\r\n\t\tthis._url = value;\r\n\t}\r\n\r\n\t_getTickerUrl(symbol?: string | null): string {\r\n\t\tif (symbol && symbol !== null) {\r\n\t\t\treturn `${BotWebsocket.BASE}/${symbol.toLowerCase()}@ticker`;\r\n\t\t} else {\r\n\t\t\treturn `${BotWebsocket.BASE}/!ticker@arr`;\r\n\t\t}\r\n\t}\r\n\r\n\t_getTickers(callback: Function): any {\r\n\t\tlet tickers: Ticker[];\r\n\t\tlet w: ReconnectingWebSocket = this.openWebSocket(this._getTickerUrl(null));\r\n\t\tw.onmessage = msg => {\r\n\t\t\tlet res: IStreamTickerRaw[];\r\n\t\t\tres = JSON.parse(msg.data);\r\n\t\t\ttickers = res.map((raw: IStreamTickerRaw) => {\r\n\t\t\t\treturn new Ticker(raw);\r\n\t\t\t});\r\n\t\t\tcallback(tickers);\r\n\t\t};\r\n\r\n\t\treturn (options) => w.close(1000, 'Close handle was called');\r\n\t}\r\n\r\n\tpublic balances(callback: Function): void {\r\n\t\tconst self = this;\r\n\t\tconst keepStreamAlive = (method, listenKey) => async () => await method.apply(this, {listenKey});\r\n\t\tself.getDataStream().then(async lk => {\r\n\t\t\tconst listenKey = lk.listenKey;\r\n\t\t\tconst w = this.openWebSocket(`${BotWebsocket.BASE}/${listenKey}`);\r\n\t\t\tw.onmessage = (msg) => {\r\n\t\t\t\tlet json = JSON.parse(msg.data);\r\n\t\t\t\tif (json.e === \"outboundAccountInfo\") {\r\n\t\t\t\t\tlet infoRaw: IOutboundAccountInfoStream;\r\n\t\t\t\t\tinfoRaw = json;\r\n\t\t\t\t\tlet accountInfo: OutboundAccountInfo = OutboundAccountInfo.fromBinanceStream(infoRaw);\r\n\t\t\t\t\tcallback(accountInfo);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tconst int = setInterval(keepStreamAlive(self.keepDataStream, listenKey), 50e3);\r\n\t\t\tkeepStreamAlive(self.keepDataStream, listenKey)();\r\n\r\n\t\t\treturn async () => {\r\n\t\t\t\tclearInterval(int);\r\n\t\t\t\tawait self.closeDataStream();\r\n\t\t\t\tw.close(1000, 'Close handle was called');\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n\tpublic candles(symbols: string[], intervals: string[], callback: Function): any {\r\n\t\tconst withinLimits = (interval: string, latestEventTime: number, klineEventCloseTime: number)=>{\r\n\r\n\t\t\tlet minPartialIntervalMins: number = Binance.intervalToMinutes[BotWebsocket.CandleOpts.partial_kline_minimum_interval];\r\n\t\t\tlet intervalMinutes: number = Binance.intervalToMinutes[interval];\r\n\r\n\t\t\tif(BotWebsocket.CandleOpts.partial_kline_1min_prior && intervalMinutes >= minPartialIntervalMins){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tlet minuteBeforeEnd: number = klineEventCloseTime - 60000;\r\n\t\t\treturn (latestEventTime === minuteBeforeEnd);\r\n\t\t};\r\n\r\n\t\tconst symbolCache = symbols.map(symbol => {\r\n\t\t\treturn intervals.map(interval => {\r\n\t\t\t\tlet w: ReconnectingWebSocket = this.openWebSocket(`${BotWebsocket.BASE}/${symbol.toLowerCase()}@kline_${interval}`);\r\n\t\t\t\tw.onmessage = async (msg) => {\r\n\t\t\t\t\tlet klineRes: IStreamRawKlineResponse;\r\n\t\t\t\t\tklineRes = JSON.parse(msg.data);\r\n\t\t\t\t\tlet candle: Candle;\r\n\t\t\t\t\t//Checks if the candle is partial.\r\n\t\t\t\t\tif (klineRes.k.x || withinLimits(interval, klineRes.E, klineRes.k.T)) {\r\n\t\t\t\t\t\tcandle = Candle.fromStream(klineRes);\r\n\t\t\t\t\t\tcallback(candle);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\treturn w;\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\treturn (options) => symbolCache.forEach(cache => cache.forEach(w => w.close(1000, 'Close handle was called')));\r\n\t}\r\n\r\n\tpublic openWebSocket(url): ReconnectingWebSocket {\r\n\t\tif (url) {\r\n\t\t\tthis.url = url;\r\n\t\t\tthis._ws = new ReconnectingWebSocket(this.url, this._reconOptions);\r\n\t\t\treturn this._ws;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic orders(callback: Function): void {\r\n\t\tconst self = this;\r\n\t\tconst keepStreamAlive = (method, listenKey) => async () => await method.apply(this, {listenKey});\r\n\t\tself.getDataStream().then(async lk => {\r\n\t\t\tconst listenKey = lk.listenKey;\r\n\t\t\tconst w = this.openWebSocket(`${BotWebsocket.BASE}/${listenKey}`);\r\n\t\t\tw.onmessage = (msg) => {\r\n\t\t\t\tlet json = JSON.parse(msg.data);\r\n\t\t\t\tif (json.e === \"executionReport\") {\r\n\t\t\t\t\tlet reportRaw: IExecutionReportRaw;\r\n\t\t\t\t\treportRaw = json;\r\n\t\t\t\t\tlet executionReport: ExecutionReport = ExecutionReport.fromBinanceStream(reportRaw);\r\n\t\t\t\t\tcallback(executionReport);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\r\n\t\t\tconst int = setInterval(keepStreamAlive(self.keepDataStream, listenKey), 50e3);\r\n\t\t\tkeepStreamAlive(self.keepDataStream, listenKey)();\r\n\r\n\t\t\treturn async () => {\r\n\t\t\t\tclearInterval(int);\r\n\t\t\t\tawait self.closeDataStream();\r\n\t\t\t\tw.close(1000, 'Close handle was called');\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n\tpublic prices(callback: Function) {\r\n\t\tlet ticksToPrices = (tickers: Ticker[]) => {\r\n\t\t\tlet prices: Price[] = tickers.map(t => {\r\n\t\t\t\treturn t.toPrice();\r\n\t\t\t});\r\n\t\t\tcallback(prices);\r\n\t\t};\r\n\r\n\t\tthis._getTickers(ticksToPrices);\r\n\t}\r\n\r\n\tpublic user(callback: Function): void {\r\n\t\tconst self = this;\r\n\t\tconst keepStreamAlive = (method, listenKey) => async () => await method.call(this, {listenKey});\r\n\t\tself.getDataStream().then(async lk => {\r\n\t\t\tconst listenKey = lk.listenKey;\r\n\t\t\tconst w = this.openWebSocket(`${BotWebsocket.BASE}/${listenKey}`);\r\n\t\t\tw.onmessage = (msg) => {\r\n\t\t\t\tlet json = JSON.parse(msg.data);\r\n\t\t\t\tif (json.e === \"executionReport\") {\r\n\t\t\t\t\tlet reportRaw: IExecutionReportRaw;\r\n\t\t\t\t\treportRaw = json;\r\n\t\t\t\t\tlet executionReport: ExecutionReport = ExecutionReport.fromBinanceStream(reportRaw);\r\n\t\t\t\t\tcallback(executionReport);\r\n\t\t\t\t} else if (json.e === \"outboundAccountInfo\") {\r\n\t\t\t\t\tlet infoRaw: IOutboundAccountInfoStream;\r\n\t\t\t\t\tinfoRaw = json;\r\n\t\t\t\t\tlet accountInfo: OutboundAccountInfo = OutboundAccountInfo.fromBinanceStream(infoRaw);\r\n\t\t\t\t\tcallback(accountInfo);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tconst int = setInterval(keepStreamAlive(self.keepDataStream, listenKey), 50e3);\r\n\t\t\tkeepStreamAlive(self.keepDataStream, listenKey)();\r\n\r\n\t\t\treturn async () => {\r\n\t\t\t\tclearInterval(int);\r\n\t\t\t\tawait self.closeDataStream();\r\n\t\t\t\tw.close(1000, 'Close handle was called');\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n\tconstructor(options: IBinanceOptions) {\r\n\t\tsuper(options);\r\n\t\tthis._reconOptions = <IReconOptions>{};\r\n\t\tthis._reconOptions.connectionTimeout = 4E3;\r\n\t\tthis._reconOptions.constructor = BotWebsocket;\r\n\t\tthis._reconOptions.debug = false;\r\n\t\tthis._reconOptions.maxReconnectionDelay = 10E3;\r\n\t\tthis._reconOptions.maxRetries = Infinity;\r\n\t\tthis._reconOptions.minReconnectionDelay = 4E3;\r\n\t}\r\n}"]}