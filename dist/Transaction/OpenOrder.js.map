{
  "version": 3,
  "file": "OpenOrder.js",
  "sourceRoot": "",
  "sources": [
    "../../src/Transaction/OpenOrder.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import {BaseOrder} from \"./BaseOrder\";\r\nimport {IOpenOrder} from \"./Interfaces/IOpenOrder\";\r\nimport {EOrderSide, EOrderStatus, EOrderType, ETimeInForce} from \"./Interfaces/EOrderEnums\";\r\n\r\nexport class OpenOrder extends BaseOrder {\r\n\tstatic allOpenOrders: OpenOrder[] = [];\r\n\tclientOrderId: string;\r\n\texecutedQty: number;\r\n\ticebergQty: number;\r\n\tisWorking: boolean;\r\n\tstatus: string;\r\n\torderId: number;\r\n\torigQty: number;\r\n\tstopPrice: number;\r\n\ttime: number;\r\n\r\n\tstatic cancelOrderById(orderId: number): boolean {\r\n\t\tlet boolRes: boolean = false;\r\n\t\tlet allOrderIds: number[];\r\n\t\tlet removeIdx: number;\r\n\t\tif (OpenOrder.allOpenOrders.length > 0) {\r\n\t\t\tallOrderIds = OpenOrder.allOpenOrders.map(order => order.orderId);\r\n\t\t\tremoveIdx = allOrderIds.indexOf(orderId);\r\n\t\t\tif (removeIdx >= 0) {\r\n\t\t\t\tOpenOrder.allOpenOrders.splice(removeIdx, 1);\r\n\t\t\t\tboolRes = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn boolRes;\r\n\t}\r\n\r\n\tstatic toBinance(openOrder: OpenOrder): IOpenOrder {\r\n\t\tlet binance: IOpenOrder = <IOpenOrder>{};\r\n\t\tbinance.clientOrderId = openOrder.clientOrderId;\r\n\t\tbinance.executedQty = (openOrder.executedQty) ? openOrder.executedQty.toString() : undefined;\r\n\t\tbinance.icebergQty = (openOrder.icebergQty) ? openOrder.icebergQty.toString() : undefined;\r\n\t\tbinance.isWorking = openOrder.isWorking;\r\n\t\tbinance.orderId = openOrder.orderId;\r\n\t\tbinance.origQty = (openOrder.origQty) ? openOrder.origQty.toString() : undefined;\r\n\t\tbinance.price = (openOrder.price) ? openOrder.price.toString() : undefined;\r\n\t\tbinance.side = EOrderSide[openOrder.side];\r\n\t\tbinance.status = EOrderStatus[openOrder.status];\r\n\t\tbinance.stopPrice = (openOrder.stopPrice) ? openOrder.stopPrice.toString() : undefined;\r\n\t\tbinance.symbol = openOrder.symbol;\r\n\t\tbinance.timeInForce = ETimeInForce[openOrder.timeInForce];\r\n\t\tbinance.time = openOrder.time;\r\n\t\tbinance.type = EOrderType[openOrder.type];\r\n\t\treturn binance;\r\n\t}\r\n\r\n\tstatic cancelOrdersBySymbol(symbol: string): boolean {\r\n\t\tlet boolResArr: boolean[] = [];\r\n\t\tlet res: boolean = false;\r\n\t\tlet cancelIds: number[];\r\n\t\tif (OpenOrder.allOpenOrders.length > 0) {\r\n\t\t\tcancelIds = OpenOrder.allOpenOrders.filter(o => o.symbol === symbol).map(o => o.orderId);\r\n\t\t\tif (cancelIds.length > 0) {\r\n\t\t\t\tcancelIds.forEach(id => {\r\n\t\t\t\t\tboolResArr.push(OpenOrder.cancelOrderById(id));\r\n\t\t\t\t});\r\n\t\t\t\tres = boolResArr.every(b => b === true);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\tconstructor(clientOrderId: string, executedQty: string, orderId: number, origQty: string,\r\n\t\t\t\t\t\t\tprice: string, side: string, status: string, symbol: string, type: string,\r\n\t\t\t\t\t\t\ttimeInForce: string, icebergQty: string, isWorking: boolean, stopPrice: string, time: number) {\r\n\t\tsuper(parseFloat(price), side, symbol, type, timeInForce);\r\n\t\tthis.icebergQty = parseFloat(icebergQty);\r\n\t\tthis.isWorking = isWorking;\r\n\t\tthis.stopPrice = parseFloat(stopPrice);\r\n\t\tthis.symbol = symbol;\r\n\t\tthis.time = time;\r\n\t}\r\n}\r\n"
  ]
}