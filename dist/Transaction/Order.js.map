{"version":3,"file":"Order.js","sourceRoot":"","sources":["../../src/Transaction/Order.ts"],"names":[],"mappings":";;AAAA,0DAA4F;AAE5F,2CAAsC;AAGtC,WAAmB,SAAQ,qBAAS;IAcnC,MAAM,CAAC,SAAS,CAAC,KAAY;QAC5B,IAAI,OAAO,GAAmB,EAAE,CAAC;QACjC,OAAO,CAAC,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC;QAC5C,OAAO,CAAC,WAAW,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;QACrF,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;QAChC,OAAO,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;QACzE,OAAO,CAAC,KAAK,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;QACnE,OAAO,CAAC,IAAI,GAAG,wBAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACtC,OAAO,CAAC,MAAM,GAAG,0BAAY,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC5C,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;QAC9B,OAAO,CAAC,WAAW,GAAG,0BAAY,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACtD,OAAO,CAAC,IAAI,GAAG,wBAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACtC,MAAM,CAAC,OAAO,CAAC;IAChB,CAAC;IAED,YAAY,KAAa;QACxB,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;QACxF,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACzC,IAAI,CAAC,MAAM,GAAG,0BAAY,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACzC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC;QACzC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,YAAY,CAAC;IACxC,CAAC;CACD;AAtCD,sBAsCC","sourcesContent":["import {EOrderSide, EOrderStatus, EOrderType, ETimeInForce} from \"./Interfaces/EOrderEnums\";\nimport {IOrder} from \"./Interfaces/IOrder\";\nimport {BaseOrder} from \"./BaseOrder\";\nimport {Fill} from \"./Fill\";\n\nexport class Order extends BaseOrder {\n\tclientOrderId: string;\n\texecutedQty: number;\n\torderId: number;\n\torigQty: number;\n\tstatus: string;\n\ttransactTime: number;\n\tprice: number;\n\tside: string;\n\tsymbol: string;\n\ttimeInForce: string;\n\ttype: string;\n\tfills?: Fill[];\n\n\tstatic toBinance(order: Order): IOrder {\n\t\tlet binance: IOrder = <IOrder>{};\n\t\tbinance.clientOrderId = order.clientOrderId;\n\t\tbinance.executedQty = (order.executedQty) ? order.executedQty.toString() : undefined;\n\t\tbinance.orderId = order.orderId;\n\t\tbinance.origQty = (order.origQty) ? order.origQty.toString() : undefined;\n\t\tbinance.price = (order.price) ? order.price.toString() : undefined;\n\t\tbinance.side = EOrderSide[order.side];\n\t\tbinance.status = EOrderStatus[order.status];\n\t\tbinance.symbol = order.symbol;\n\t\tbinance.timeInForce = ETimeInForce[order.timeInForce];\n\t\tbinance.type = EOrderType[order.type];\n\t\treturn binance;\n\t}\n\n\tconstructor(order: IOrder) {\n\t\tsuper(order.side, order.symbol, order.type, parseFloat(order.price), order.timeInForce);\n\t\tthis.executedQty = parseFloat(order.executedQty);\n\t\tthis.orderId = order.orderId;\n\t\tthis.origQty = parseFloat(order.origQty);\n\t\tthis.status = EOrderStatus[order.status];\n\t\tthis.clientOrderId = order.clientOrderId;\n\t\tthis.transactTime = order.transactTime;\n\t}\n}"]}