{"version":3,"file":"TextMessage.js","sourceRoot":"","sources":["../../src/TextMessage/TextMessage.ts"],"names":[],"mappings":"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","sourcesContent":["import {ICarrier} from \"./ICarrier\";\nimport {NodeMailer} from \"../Error/NodeMailer\";\nimport {HttpErrorHandler} from \"../Error/HttpErrorHandler\";\nimport {ITextMsgOptions} from \"./ITextMsgOptions\";\nimport {IMessageOptions} from \"../Error/Interfaces/IMessageOptions\";\nimport {EErrorType} from \"../Error/Enums/EErrorType\";\nimport {Binance} from \"../Binance/Binance\";\nimport {HttpError} from \"../Error/HttpError\";\nimport {ISmtpOptions} from \"../Error/Interfaces/ISmtpOptions\";\nimport {TCarrier} from \"./TCarrier\";\nimport {IBinanceOptions} from \"..\";\n\nexport class TextMessage {\n\tpublic static USCarriers: ICarrier[] = [\n\t\t{\n\t\t\t\"name\": \"att\",\n\t\t\t\"domain\": \"txt.att.net\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"tmobile\",\n\t\t\t\"domain\": \"tmomail.net\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"verizon\",\n\t\t\t\"domain\": \"vtext.com\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"cricket\",\n\t\t\t\"domain\": \"sms.mycricket.com\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"uscellular\",\n\t\t\t\"domain\": \"email.uscc.net\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"virginmobile\",\n\t\t\t\"domain\": \"vmobl.com\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"boostmobile\",\n\t\t\t\"domain\": \"myboostmobile.com\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"metropcs\",\n\t\t\t\"domain\": \"mymetropcs.com\"\n\t\t}\n\t];\n\n\tcarrier: TCarrier;\n\tdomain: string;\n\tpublic static mailService: NodeMailer;\n\tmsgOptions?: IMessageOptions;\n\tsmtpOptions?: ISmtpOptions;\n\tpublic static txtMsgOpts: ITextMsgOptions;\n\n\tpublic getEmailAddress(phoneNumber?: number): string {\n\t\treturn `${phoneNumber}@${this.domain}`;\n\t}\n\n\tpublic async send(error: HttpError | Error, srcUrl?: string): Promise<void> {\n\t\ttry {\n\t\t\tlet isKnownErr: boolean = false;\n\t\t\tlet isFatal: boolean = false;\n\t\t\tlet msg: string;\n\n\t\t\tif (typeof TextMessage.txtMsgOpts !== \"object\") {\n\t\t\t\treturn Promise.reject(new Error(\"Static Options are missing from TextMessage class\"));\n\t\t\t}\n\n\t\t\tmsg = error.message;\n\n\t\t\tif (typeof error['isFatal'] === \"boolean\" || (typeof error['handler'] === \"function\")) {\n\t\t\t\tisFatal = error['isFatal'];\n\t\t\t\tisKnownErr = !!(error['handler'].type);\n\t\t\t}\n\t\t\tif (!TextMessage.txtMsgOpts.phoneNum) {\n\t\t\t\treturn Promise.reject(new Error(\"A recipient's phone number is required phoneNum send a text message.\"));\n\t\t\t}\n\n\t\t\tthis.msgOptions.to = this.getEmailAddress(TextMessage.txtMsgOpts.phoneNum);\n\t\t\tthis.msgOptions.subject = `${(isFatal) ? \"Fatal\" : \"\"}${(isKnownErr) ? EErrorType[error['handler'].type] : \"Unknown\"} Error Received`;\n\t\t\tthis.msgOptions.text = `${msg}. \\nServer: ${srcUrl}`;\n\t\t\tawait HttpErrorHandler.mailService.sendEmail(this.msgOptions, this.smtpOptions);\n\t\t\treturn;\n\t\t} catch (err) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tconstructor(carrierName?: TCarrier, binanceOpts?: IBinanceOptions) {\n\t\tthis.smtpOptions = binanceOpts.emailServiceOpts;\n\t\tthis.msgOptions = binanceOpts.emailMsgOpts;\n\t\tlet carrier: TCarrier = (carrierName) ? <TCarrier>carrierName.toLowerCase() : <TCarrier>TextMessage.txtMsgOpts.carrier;\n\t\tlet matchedCarrier: ICarrier[] = TextMessage.USCarriers.filter(d => {\n\t\t\treturn (d.name === carrier);\n\t\t});\n\t\tif (matchedCarrier.length > 0 && carrier) {\n\t\t\tlet match: ICarrier = matchedCarrier[0];\n\t\t\tthis.domain = match.domain;\n\t\t\tthis.carrier = match.name;\n\t\t} else {\n\t\t\tthrow new Error(`${carrierName} not found`);\n\t\t}\n\t\tTextMessage.mailService = new NodeMailer();\n\t}\n}"]}