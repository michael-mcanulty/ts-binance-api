{"version":3,"file":"TextMessage.js","sourceRoot":"","sources":["../../src/TextMessage/TextMessage.ts"],"names":[],"mappings":";;AACA,oDAA+C;AAC/C,gEAA2D;AAM3D,MAAa,WAAW;IA0DvB,YAAY,WAAqB,EAAE,QAAsB;QACxD,IAAI,CAAC,UAAU,GAAoB,EAAE,CAAC;QACtC,IAAG,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAC;YAC5E,MAAM,IAAI,KAAK,CAAC,iFAAiF,CAAC,CAAC;SACnG;QACD,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;QAC1C,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;QAC5B,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC;QAC3B,IAAI,cAAc,GAAe,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;YAClE,OAAO,CAAC,CAAC,CAAC,IAAI,KAAK,WAAW,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QACH,IAAI,cAAc,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;YAChD,IAAI,KAAK,GAAa,cAAc,CAAC,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;YAC3B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC;SAC1B;aAAM;YACN,MAAM,IAAI,KAAK,CAAC,GAAG,WAAW,YAAY,CAAC,CAAC;SAC5C;QACD,WAAW,CAAC,WAAW,GAAG,IAAI,uBAAU,EAAE,CAAC;IAC5C,CAAC;IApCO,uBAAuB,CAAC,WAAoB;QACnD,OAAO,GAAG,WAAW,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;IACxC,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,OAAe,EAAE,OAAe,EAAE,cAAsB;QACzE,IAAI,SAAc,CAAC;QACnB,IAAI;YACH,IAAI,CAAC,UAAU,CAAC,EAAE,GAAG,IAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC;YAClE,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,OAAO,CAAC;YAClC,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,OAAO,CAAC;YAC/B,SAAS,GAAG,MAAM,mCAAgB,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YAC5F,OAAO,SAAS,CAAC;SACjB;QAAC,OAAO,GAAG,EAAE;YACb,MAAM,GAAG,CAAC;SACV;IACF,CAAC;;AAvDa,sBAAU,GAAe;IACtC;QACC,MAAM,EAAE,KAAK;QACb,QAAQ,EAAE,aAAa;KACvB;IACD;QACC,MAAM,EAAE,SAAS;QACjB,QAAQ,EAAE,aAAa;KACvB;IACD;QACC,MAAM,EAAE,SAAS;QACjB,QAAQ,EAAE,WAAW;KACrB;IACD;QACC,MAAM,EAAE,SAAS;QACjB,QAAQ,EAAE,mBAAmB;KAC7B;IACD;QACC,MAAM,EAAE,YAAY;QACpB,QAAQ,EAAE,gBAAgB;KAC1B;IACD;QACC,MAAM,EAAE,cAAc;QACtB,QAAQ,EAAE,WAAW;KACrB;IACD;QACC,MAAM,EAAE,aAAa;QACrB,QAAQ,EAAE,mBAAmB;KAC7B;IACD;QACC,MAAM,EAAE,UAAU;QAClB,QAAQ,EAAE,gBAAgB;KAC1B;CACD,CAAC;AAlCH,kCA8EC","sourcesContent":["import {ICarrier} from \"./ICarrier\";\r\nimport {NodeMailer} from \"../Error/NodeMailer\";\r\nimport {HttpErrorHandler} from \"../Error/HttpErrorHandler\";\r\nimport {IMessageOptions} from \"../Error/Interfaces/IMessageOptions\";\r\nimport {ISmtpOptions} from \"../Error/Interfaces/ISmtpOptions\";\r\nimport {TCarrier} from \"./TCarrier\";\r\nimport {ECarrier} from \"../TextMessage/ECarrier\";\r\n\r\nexport class TextMessage {\r\n\tpublic static USCarriers: ICarrier[] = [\r\n\t\t{\r\n\t\t\t\"name\": \"att\",\r\n\t\t\t\"domain\": \"txt.att.net\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"tmobile\",\r\n\t\t\t\"domain\": \"tmomail.net\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"verizon\",\r\n\t\t\t\"domain\": \"vtext.com\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"cricket\",\r\n\t\t\t\"domain\": \"sms.mycricket.com\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"uscellular\",\r\n\t\t\t\"domain\": \"email.uscc.net\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"virginmobile\",\r\n\t\t\t\"domain\": \"vmobl.com\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"boostmobile\",\r\n\t\t\t\"domain\": \"myboostmobile.com\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"metropcs\",\r\n\t\t\t\"domain\": \"mymetropcs.com\"\r\n\t\t}\r\n\t];\r\n\tcarrier: TCarrier;\r\n\tdomain: string;\r\n\tpublic static mailService: NodeMailer;\r\n\tmsgOptions: IMessageOptions;\r\n\tsmtpOptions: ISmtpOptions;\r\n\r\n\tprivate _getCarrierEmailAddress(phoneNumber?: number): string {\r\n\t\treturn `${phoneNumber}@${this.domain}`;\r\n\t}\r\n\r\n\tpublic async send(subject: string, message: string, recipientPhone: number): Promise<void> {\r\n\t\tlet sentEmail: any;\r\n\t\ttry {\r\n\t\t\tthis.msgOptions.to = this._getCarrierEmailAddress(recipientPhone);\r\n\t\t\tthis.msgOptions.subject = message;\r\n\t\t\tthis.msgOptions.text = message;\r\n\t\t\tsentEmail = await HttpErrorHandler.mailService.sendEmail(this.msgOptions, this.smtpOptions);\r\n\t\t\treturn sentEmail;\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor(carrierName: ECarrier, smtpOpts: ISmtpOptions) {\r\n\t\tthis.msgOptions = <IMessageOptions>{};\r\n\t\tif(!smtpOpts || !smtpOpts.auth || !smtpOpts.auth.user || !smtpOpts.auth.pass){\r\n\t\t\tthrow new Error(\"Creating a new TextMessage requires email options with a username and password.\");\r\n\t\t}\r\n\t\tthis.msgOptions.from = smtpOpts.auth.user;\r\n\t\tthis.smtpOptions = smtpOpts;\r\n\t\tthis.carrier = carrierName;\r\n\t\tlet matchedCarrier: ICarrier[] = TextMessage.USCarriers.filter(d => {\r\n\t\t\treturn (d.name === carrierName);\r\n\t\t});\r\n\t\tif (matchedCarrier && matchedCarrier.length > 0) {\r\n\t\t\tlet match: ICarrier = matchedCarrier[0];\r\n\t\t\tthis.domain = match.domain;\r\n\t\t\tthis.carrier = match.name;\r\n\t\t} else {\r\n\t\t\tthrow new Error(`${carrierName} not found`);\r\n\t\t}\r\n\t\tTextMessage.mailService = new NodeMailer();\r\n\t}\r\n}"]}