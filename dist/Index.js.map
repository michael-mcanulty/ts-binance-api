{
  "version": 3,
  "file": "Index.js",
  "sourceRoot": "",
  "sources": [
    "../src/Index.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;AAAA,yCAAoC;AAEpC,+CAA0C;AAE1C;IAeC;IACA,CAAC;IAZM,MAAM,CAAC,IAAI,CAAC,OAAwB;QAC1C,MAAM,CAAC,IAAI,OAAO,CAAC,CAAO,OAAO,EAAE,MAAM,EAAE,EAAE;YAC5C,IAAI,CAAC;gBACJ,MAAM,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;gBACtC,OAAO,EAAE,CAAC;YACX,CAAC;YAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACd,MAAM,EAAE,CAAA;YACT,CAAC;QACF,CAAC,CAAA,CAAC,CAAC;IACJ,CAAC;;AAXa,WAAO,GAAY,IAAI,iBAAO,EAAE,CAAC;AAFhD,kBAiBC;AAED,IAAI,IAAI,GAAqC,EAAE,CAAC;AAChD,IAAI,IAAI,GAAQ,IAAI,WAAI,EAAE,CAAC;AAC3B,IAAI,CAAC,GAAG,GAAG,kEAAkE,CAAC;AAC9E,IAAI,CAAC,MAAM,GAAG,kEAAkE,CAAC;AACjF,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;AAE1B,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAM,OAAO,EAAC,EAAE;IACnC,MAAM,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC1C,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC;AACJ,CAAC,CAAA,CAAC,CAAC",
  "sourcesContent": [
    "import {Auth} from \"./Account/Auth\";\nimport {IBinanceOptions} from \"./Binance/Interfaces/IBinanceOptions\";\nimport {Binance} from \"./Binance/Binance\";\n\nexport class Bot {\n\n\tpublic static binance: Binance = new Binance();\n\n\tpublic static init(options: IBinanceOptions): Promise<void> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tawait Bot.binance.initialize(options);\n\t\t\t\tresolve();\n\t\t\t} catch (err) {\n\t\t\t\treject()\n\t\t\t}\n\t\t});\n\t}\n\n\tconstructor() {\n\t}\n}\n\nlet opts: IBinanceOptions = <IBinanceOptions>{};\nlet auth:Auth = new Auth();\nauth.key = \"S05wQBtvZ8LmuAkqiDMXWKvJI1SBeR9H6kE9poWQVeA6MLGp508h7gLX0Wce92u6\";\nauth.secret = \"iDCk1PtTyucLSlj5wRYIeSrphteLX2ESRONkcsxjhbg2PubidzGps34bKw98tm2D\";\nopts.auth = auth;\nopts.test = true;\nopts.useServerTime = true;\n\nBot.init(opts).then(async success => {\n\tawait Bot.binance.websocket.balances(res => {\n\t\tconsole.log(res);\n\t});\n});\n\n"
  ]
}