{
  "version": 3,
  "file": "IBinanceRest.js",
  "sourceRoot": "",
  "sources": [
    "../../../src/Rest/Interfaces/IBinanceRest.ts"
  ],
  "names": [],
  "mappings": "",
  "sourcesContent": [
    "import {INewOrder} from \"../../Transaction/Interfaces/INewOrder\";\nimport {IExchangeInfo} from \"../../ExchangeInfo/Interfaces/IExchangeInfo\";\nimport {NewOrder} from \"../../Transaction/NewOrder\";\nimport {Price} from \"../../Transaction/Price\";\nimport {IQueryOrderResult} from \"../../Transaction/Interfaces/IQueryOrderResult\";\nimport {ICancelOrderResult} from \"../../Transaction/Interfaces/iCandleOrderResult\";\nimport {ICandlesOptions} from \"../../ExchangeInfo/Interfaces/ICandleOptions\";\nimport {CandleInterval} from \"../../ExchangeInfo/CandleInterval\";\nimport {CancelOrder} from \"../../Transaction/CancelOrder\";\nimport {IQueryOrder} from \"../../Transaction/Interfaces/IQueryOrder\";\n\nexport interface IBinanceRest {\n\taccountInfo(options?: { useServerTime: boolean }): Promise<Account>;\n\n\tcancelOrder(options: CancelOrder): Promise<ICancelOrderResult>;\n\n\tgetCandles(options: ICandlesOptions): Promise<CandleInterval[]>;\n\n\texchangeInfo(): Promise<IExchangeInfo>;\n\n\tgetOrder(options: IQueryOrder, useServerTime?:boolean): Promise<IQueryOrderResult>;\n\n\topenOrders(options: IQueryOrder): Promise<IQueryOrderResult[]>;\n\n\torder(options: INewOrder): Promise<NewOrder>;\n\n\torderTest(options: INewOrder): Promise<NewOrder>;\n\n\tgetPrices(): Promise<Price[]>;\n\n\tgetTime(): Promise<number>;\n\n/*\n: payload => pCall('/v3/order', payload),\n\tcancelOrder: payload => pCall('/v3/order', payload, 'DELETE'),\n\n\topenOrders: payload => pCall('/v3/openOrders', payload),\n\tallOrders: payload => pCall('/v3/allOrders', payload),*/\n}"
  ]
}