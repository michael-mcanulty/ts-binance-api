{
  "version": 3,
  "file": "iBinanceRest.js",
  "sourceRoot": "",
  "sources": [
    "../../../src/Rest/Interfaces/iBinanceRest.ts"
  ],
  "names": [],
  "mappings": "",
  "sourcesContent": [
    "import {INewOrder} from \"../../Transaction/Interfaces/INewOrder\";\nimport {IExchangeInfo} from \"../../ExchangeInfo/Interfaces/IExchangeInfo\";\nimport {Order} from \"../../Transaction/Order\";\nimport {Price} from \"../../Transaction/Price\";\nimport {IQueryOrderResult} from \"../../Transaction/Interfaces/IQueryOrderResult\";\nimport {ICancelOrderResult} from \"../../Transaction/Interfaces/iCandleOrderResult\";\nimport {iCandlesOptions} from \"../../ExchangeInfo/Interfaces/ICandleOptions\";\nimport {CandleInterval} from \"../../ExchangeInfo/CandleInterval\";\n\nexport interface IBinanceRest {\n    accountInfo(options?: { useServerTime: boolean }): Promise<Account>;\n\n\tcancelOrder(options: { symbol: string; orderId: number, useServerTime?: boolean }): Promise<ICancelOrderResult>;\n\n    candles(options: iCandlesOptions): Promise<CandleInterval[]>;\n\n\texchangeInfo(): Promise<IExchangeInfo>;\n\n\tgetOrder(options: { symbol: string; orderId: number, useServerTime?: boolean }): Promise<IQueryOrderResult>;\n\n\topenOrders(options: { symbol: string, useServerTime?: boolean }): Promise<IQueryOrderResult[]>;\n\n\torder(options: INewOrder): Promise<Order>;\n\n\torderTest(options: INewOrder): Promise<Order>;\n\n    prices(): Promise<Price[]>;\n\n    time(): Promise<number>;\n}"
  ]
}