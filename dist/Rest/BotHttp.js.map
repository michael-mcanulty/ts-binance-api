{"version":3,"file":"BotHttp.js","sourceRoot":"","sources":["../../src/Rest/BotHttp.ts"],"names":[],"mappings":"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","sourcesContent":["import * as crypto from 'crypto'\nimport {IServerTime} from \"./Interfaces/IServerTime\";\nimport {IBinanceOptions} from \"../Binance/Interfaces/IBinanceOptions\";\nimport {ITimestamp} from \"./Interfaces/ITimestamp\";\nimport {Signed} from \"./Signed\";\nimport {ApiHeader} from \"./ApiHeader\";\nimport {CallOptions} from \"./CallOptions\";\nimport {ICallOpts} from '../Rest/Interfaces/ICallOpts';\nimport {Response} from \"request\";\nimport * as requestPromise from \"request-promise-native\";\nimport  {OptionsWithUri} from \"request-promise-native\";\n\nexport class BotHttp {\n\tpublic static BASE: string = 'https://api.binance.us';\n\tpublic options: IBinanceOptions;\n\n\tpublic async call(callOptions: CallOptions): Promise<any> {\n\t\tlet result: any;\n\t\ttry {\n\t\t\tresult = await this.binanceRequest(callOptions);\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t//TODO: CallOpts rename to something like requestOpts. Extend request or add properties to callOpts like 'form'.\n\tpublic async binanceRequest(callOptions: CallOptions):Promise<Response>{\n\t\tlet res: Response;\n\t\tlet requestOpts: requestPromise.OptionsWithUri = callOptions.toObjLiteral();\n\n\t\ttry {\n\t\t\tres = await BotHttp.requestApi(requestOpts);\n\t\t\treturn res;\n\t\t}catch(err){\n\t\t\tthrow err;\n\t\t}\n\t}\n  public static async requestApi(uriOptions: OptionsWithUri): Promise<any>{\n\t\tlet error: Error;\n\t\tlet res: Response;\n\t\ttry{\n\t\t\tres = await requestPromise[uriOptions.method.toLowerCase()](uriOptions);\n\t\t\tif (res.statusCode !== 200) {\n\t\t\t\terror = new Error(res.statusMessage);\n\t\t\t\terror.name = res.statusCode.toString();\n\t\t\t\treturn Promise.reject(error);\n\t\t\t}else {\n\t\t\t\treturn res.body;\n\t\t\t}\n\t\t}catch(err){\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate getSignature(payload: any, timestamp: ITimestamp): string {\n\t\tlet signature: string;\n\t\tsignature = crypto.createHmac('sha256', this.options.auth.secret).update(BotHttp.makeQueryString(Object.assign(payload, timestamp)).substr(1)).digest('hex');\n\t\treturn signature;\n\t}\n\n\tprivate async getTimestamp(): Promise<ITimestamp> {\n\t\tlet time: ITimestamp = <ITimestamp>{};\n\t\tif (this.options.useServerTime) {\n\t\t\ttry {\n\t\t\t\ttime.timestamp = await this.timestamp();\n\t\t\t\treturn time;\n\t\t\t} catch (err) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t} else {\n\t\t\ttime.timestamp = Date.now();\n\t\t\treturn time;\n\t\t}\n\t}\n\n\tpublic static makeQueryString(params: any): string {\n\t\tlet result: string;\n\t\tlet keys: string[];\n\t\tkeys = Object.keys(params).filter(k => params[k]);\n\t\tif (!params) {\n\t\t\tresult = \"\";\n\t\t} else {\n\t\t\tresult = `?${keys.map(k => `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`).join('&')}`;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic async ping(): Promise<boolean> {\n\t\tlet config: CallOptions;\n\t\tlet options: ICallOpts = <ICallOpts>{};\n\t\toptions.method = \"GET\";\n\t\toptions.json = true;\n\t\toptions.isSigned = true;\n\t\toptions.uri = `${BotHttp.BASE}/api/v1/ping`;\n\t\toptions.apiKey = this.options.auth.key;\n\n\t\ttry {\n\t\t\tconfig = new CallOptions(options);\n\t\t\tawait this.call(config);\n\t\t\treturn true;\n\t\t} catch (err) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tpublic async privateCall(options: CallOptions): Promise<any> {\n\t\tlet tStamp: ITimestamp;\n\t\tlet result: any;\n\t\tlet signature: string;\n\n\t\ttry {\n\t\t\toptions.headers = new ApiHeader(this.options.auth.key);\n\n\t\t\tif (options.isSigned) {\n\t\t\t\tif(typeof options.qs == undefined){\n\t\t\t\t\toptions.qs = new Signed();\n\t\t\t\t}\n\t\t\t\ttStamp = await this.getTimestamp();\n\t\t\t\tsignature = await this.getSignature(options.qs, tStamp);\n\t\t\t\toptions.qs['timestamp'] = tStamp.timestamp;\n\t\t\t\toptions.qs['signature'] = signature;\n\t\t\t} else if(options && typeof options.qs === \"object\" && options.qs['timestamp']){\n\t\t\t\tdelete options.qs['timestamp'];\n\t\t\t}\n\t\t\tresult = await this.binanceRequest(options);\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate async time(): Promise<IServerTime> {\n\t\tlet opts: CallOptions;\n\t\tlet options: ICallOpts = <ICallOpts>{};\n\n\t\ttry {\n\t\t\toptions.method = \"GET\";\n\t\t\toptions.json = true;\n\t\t\toptions.isSigned = true;\n\t\t\toptions.apiKey = this.options.auth.key;\n\t\t\toptions.uri = `${BotHttp.BASE}/api/v1/time`;\n\n\t\t\topts = new CallOptions(options);\n\t\t\treturn <IServerTime> await this.call(opts);\n\t\t} catch (err) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tpublic async timestamp(): Promise<number> {\n\t\ttry {\n\t\t\tlet time: IServerTime = await this.time();\n\t\t\treturn time.serverTime;\n\t\t} catch (err) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tconstructor(options: IBinanceOptions) {\n\t\tthis.options = options;\n\t}\n}\n"]}