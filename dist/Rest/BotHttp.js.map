{"version":3,"file":"BotHttp.js","sourceRoot":"","sources":["../../src/Rest/BotHttp.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Fetch from 'isomorphic-fetch'\nimport * as crypto from 'crypto'\nimport {HttpError} from \"../Error/HttpError\";\nimport {IServerTime} from \"./Interfaces/IServerTime\";\nimport {EMethod} from \"./EMethod\";\nimport {IBinanceOptions} from \"../Binance/Interfaces/IBinanceOptions\";\nimport {ITimestamp} from \"./Interfaces/ITimestamp\";\nimport {Signed} from \"./Signed\";\nimport {NewOrder} from \"../Transaction/NewOrder\";\nimport {CancelOrder} from \"../Transaction/CancelOrder\";\nimport {OpenOrder} from \"../Transaction/OpenOrder\";\nimport {DataStream} from \"./DataStream\";\nimport {ApiHeader} from \"./ApiHeader\";\nimport {CallOptions} from \"./CallOptions\";\nimport {QueryOrder} from \"../Transaction/QueryOrder\";\nimport {AccountInfoOptions} from \"../Account/AccountInfoOptions\";\nimport {IBinanceApiAuth} from \"../Account/Interfaces/IBinanceApiAuth\";\nimport {IDepositAddressReq} from \"../Deposit/Interfaces/IDepositAddressReq\";\nimport {IDepositHistoryReq} from '../Deposit/Interfaces/IDepositHistoryReq';\nimport {IWithdrawHistoryReq} from \"../Withdraw/Interfaces/IWithdrawHistoryReq\";\n\nexport class BotHttp {\n\tpublic static BASE: string = 'https://api.binance.com';\n\tpublic auth: IBinanceApiAuth;\n\tpublic static fetch: Function = Fetch;\n\tpublic options: IBinanceOptions;\n\n\tstatic buildUrl(path: string, noData: boolean, data: object): string {\n\t\treturn `${BotHttp.BASE}${path.includes('/wapi') ? '' : '/api'}${path}${noData ? '' : BotHttp.makeQueryString(data)}`;\n\t}\n\n\tpublic call(path: string, callOptions: CallOptions, payload?: any): Promise<any> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tlet result: any;\n\t\t\ttry {\n\t\t\t\tresult = await this.fetch(path, callOptions, payload);\n\t\t\t\tresolve(result);\n\t\t\t} catch (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic fetch(path: string, callOptions: CallOptions, payload: any): Promise<Response | HttpError> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tlet url: string = BotHttp.buildUrl(path, callOptions.noData, payload);\n\t\t\t\tlet res: Response = await BotHttp.fetch(url, callOptions);\n\t\t\t\tlet json = await res.json();\n\n\t\t\t\tif (res.ok === false) {\n\t\t\t\t\tlet error: HttpError = new HttpError(parseInt(res.status.toString()), res.statusText);\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(<Response>json);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getSignature(payload: any, timestamp: ITimestamp): string {\n\t\tlet signature: string = crypto.createHmac('sha256', this.options.auth.secret).update(BotHttp.makeQueryString(Object.assign(payload, timestamp)).substr(1)).digest('hex');\n\t\treturn signature;\n\t}\n\n\tprivate getTimestamp(): Promise<ITimestamp> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tlet time: ITimestamp = <ITimestamp>{};\n\t\t\tif (this.options.useServerTime) {\n\t\t\t\ttry {\n\t\t\t\t\ttime.timestamp = await this.timestamp();\n\t\t\t\t\tresolve(time);\n\t\t\t\t} catch (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttime.timestamp = Date.now();\n\t\t\t\tresolve(time);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic static makeQueryString(params: any): string {\n\t\tlet result: string;\n\t\tlet keys: string[];\n\t\tkeys = Object.keys(params).filter(k => params[k]);\n\t\tif (!params) {\n\t\t\tresult = \"\";\n\t\t} else {\n\t\t\tresult = `?${keys.map(k => `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`).join('&')}`;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic ping(): Promise<boolean> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tlet opts: CallOptions = new CallOptions(EMethod.GET, true, true, false, this.options.auth.key);\n\t\t\t\tawait this.call('/v1/ping', opts);\n\t\t\t\tresolve(true);\n\t\t\t} catch (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic privateCall(path: string, callOptions: CallOptions, payload?: IWithdrawHistoryReq | IDepositHistoryReq | IDepositAddressReq | QueryOrder | NewOrder | Signed | CancelOrder | OpenOrder | DataStream | AccountInfoOptions): Promise<any> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tlet result: any;\n\t\t\tlet signature: string;\n\t\t\tif (!payload) {\n\t\t\t\tpayload = new Signed();\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tlet tStamp: ITimestamp = await this.getTimestamp();\n\t\t\t\tcallOptions.headers = new ApiHeader(this.options.auth.key);\n\t\t\t\tsignature = await this.getSignature(payload, tStamp);\n\n\t\t\t\tif (!callOptions.noExtra) {\n\t\t\t\t\tpayload.timestamp = tStamp.timestamp;\n\t\t\t\t\tpayload.signature = signature;\n\t\t\t\t} else {\n\t\t\t\t\tdelete payload.timestamp;\n\t\t\t\t}\n\t\t\t\tresult = await this.fetch(path, callOptions, payload);\n\t\t\t\tresolve(result);\n\t\t\t} catch (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate time(): Promise<IServerTime> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tlet opts: CallOptions = new CallOptions(EMethod.GET, true, true, false, this.options.auth.key);\n\t\t\t\tlet server: IServerTime = await this.call('/v1/time', opts);\n\t\t\t\tresolve(server);\n\t\t\t} catch (err) {\n\t\t\t\treject(`Error in server time sync. Message: ${err}`);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic timestamp(): Promise<number> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tlet time: IServerTime = await this.time();\n\t\t\t\tresolve(time.serverTime);\n\t\t\t} catch (err) {\n\t\t\t\treject(`Error in server time sync. Message: ${err}`);\n\t\t\t}\n\t\t});\n\t}\n\n\tconstructor(options: IBinanceOptions) {\n\t\tthis.options = options;\n\t}\n}\n"]}