{"version":3,"file":"BotHttp.js","sourceRoot":"","sources":["../../src/Rest/BotHttp.ts"],"names":[],"mappings":"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","sourcesContent":["import * as crypto from 'crypto'\r\nimport {IServerTime} from \"./Interfaces/IServerTime\";\r\nimport {IBinanceOptions} from \"../Binance/Interfaces/IBinanceOptions\";\r\nimport {ITimestamp} from \"./Interfaces/ITimestamp\";\r\nimport {Signed} from \"./Signed\";\r\nimport {ApiHeader} from \"./ApiHeader\";\r\nimport {CallOptions} from \"./CallOptions\";\r\nimport {ICallOpts} from '../Rest/Interfaces/ICallOpts';\r\nimport {Response} from \"request\";\r\nimport * as requestPromise from \"request-promise-native\";\r\nimport  {OptionsWithUri} from \"request-promise-native\";\r\n\r\nexport class BotHttp {\r\n\tpublic static BASE: string = 'https://api.binance.com';\r\n\tpublic options: IBinanceOptions;\r\n\r\n\tpublic async call(callOptions: CallOptions): Promise<any> {\r\n\t\tlet result: any;\r\n\t\ttry {\r\n\t\t\tresult = await this.binanceRequest(callOptions);\r\n\t\t\treturn result;\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\t//TODO: CallOpts rename to something like requestOpts. Extend request or add properties to callOpts like 'form'.\r\n\tpublic async binanceRequest(callOptions: CallOptions):Promise<Response>{\r\n\t\tlet res: Response;\r\n\t\tlet requestOpts: requestPromise.OptionsWithUri = callOptions.toObjLiteral();\r\n\r\n\t\ttry {\r\n\t\t\tres = await BotHttp.requestApi(requestOpts);\r\n\t\t\treturn res;\r\n\t\t}catch(err){\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n  public static async requestApi(uriOptions: OptionsWithUri): Promise<any>{\r\n\t\tlet error: Error;\r\n\t\tlet res: Response;\r\n\t\ttry{\r\n\t\t\tres = await requestPromise[uriOptions.method.toLowerCase()](uriOptions);\r\n\t\t\tif (res.statusCode !== 200) {\r\n\t\t\t\terror = new Error(res.statusMessage);\r\n\t\t\t\terror.name = res.statusCode.toString();\r\n\t\t\t\treturn Promise.reject(error);\r\n\t\t\t}else {\r\n\t\t\t\treturn res.body;\r\n\t\t\t}\r\n\t\t}catch(err){\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getSignature(payload: any, timestamp: ITimestamp): string {\r\n\t\tlet signature: string;\r\n\t\tsignature = crypto.createHmac('sha256', this.options.auth.secret).update(BotHttp.makeQueryString(Object.assign(payload, timestamp)).substr(1)).digest('hex');\r\n\t\treturn signature;\r\n\t}\r\n\r\n\tprivate async getTimestamp(): Promise<ITimestamp> {\r\n\t\tlet time: ITimestamp = <ITimestamp>{};\r\n\t\tif (this.options.useServerTime) {\r\n\t\t\ttry {\r\n\t\t\t\ttime.timestamp = await this.timestamp();\r\n\t\t\t\treturn time;\r\n\t\t\t} catch (err) {\r\n\t\t\t\tthrow err;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttime.timestamp = Date.now();\r\n\t\t\treturn time;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static makeQueryString(params: any): string {\r\n\t\tlet result: string;\r\n\t\tlet keys: string[];\r\n\t\tkeys = Object.keys(params).filter(k => params[k]);\r\n\t\tif (!params) {\r\n\t\t\tresult = \"\";\r\n\t\t} else {\r\n\t\t\tresult = `?${keys.map(k => `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`).join('&')}`;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic async ping(): Promise<boolean> {\r\n\t\tlet config: CallOptions;\r\n\t\tlet options: ICallOpts = <ICallOpts>{};\r\n\t\toptions.method = \"GET\";\r\n\t\toptions.json = true;\r\n\t\toptions.isSigned = true;\r\n\t\toptions.uri = `${BotHttp.BASE}/api/v1/ping`;\r\n\t\toptions.apiKey = this.options.auth.key;\r\n\r\n\t\ttry {\r\n\t\t\tconfig = new CallOptions(options);\r\n\t\t\tawait this.call(config);\r\n\t\t\treturn true;\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async privateCall(options: CallOptions): Promise<any> {\r\n\t\tlet tStamp: ITimestamp;\r\n\t\tlet result: any;\r\n\t\tlet signature: string;\r\n\r\n\t\ttry {\r\n\t\t\toptions.headers = new ApiHeader(this.options.auth.key);\r\n\r\n\t\t\tif (options.isSigned) {\r\n\t\t\t\tif(typeof options.qs == undefined){\r\n\t\t\t\t\toptions.qs = new Signed();\r\n\t\t\t\t}\r\n\t\t\t\ttStamp = await this.getTimestamp();\r\n\t\t\t\tsignature = await this.getSignature(options.qs, tStamp);\r\n\t\t\t\toptions.qs['timestamp'] = tStamp.timestamp;\r\n\t\t\t\toptions.qs['signature'] = signature;\r\n\t\t\t} else if(options && typeof options.qs === \"object\" && options.qs['timestamp']){\r\n\t\t\t\tdelete options.qs['timestamp'];\r\n\t\t\t}\r\n\t\t\tresult = await this.binanceRequest(options);\r\n\t\t\treturn result;\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async time(): Promise<IServerTime> {\r\n\t\tlet opts: CallOptions;\r\n\t\tlet options: ICallOpts = <ICallOpts>{};\r\n\r\n\t\ttry {\r\n\t\t\toptions.method = \"GET\";\r\n\t\t\toptions.json = true;\r\n\t\t\toptions.isSigned = true;\r\n\t\t\toptions.apiKey = this.options.auth.key;\r\n\t\t\toptions.uri = `${BotHttp.BASE}/api/v1/time`;\r\n\r\n\t\t\topts = new CallOptions(options);\r\n\t\t\treturn <IServerTime> await this.call(opts);\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async timestamp(): Promise<number> {\r\n\t\ttry {\r\n\t\t\tlet time: IServerTime = await this.time();\r\n\t\t\treturn time.serverTime;\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor(options: IBinanceOptions) {\r\n\t\tthis.options = options;\r\n\t}\r\n}\r\n"]}