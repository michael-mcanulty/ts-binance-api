{"version":3,"file":"BotHttp.js","sourceRoot":"","sources":["../../src/Rest/BotHttp.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Fetch from 'isomorphic-fetch'\nimport * as crypto from 'crypto'\nimport {HttpError} from \"../Error/HttpError\";\nimport {IServerTime} from \"./Interfaces/IServerTime\";\nimport {IBinanceOptions} from \"../Binance/Interfaces/IBinanceOptions\";\nimport {ITimestamp} from \"./Interfaces/ITimestamp\";\nimport {Signed} from \"./Signed\";\nimport {NewOrder} from \"../Transaction/NewOrder\";\nimport {CancelOrder} from \"../Transaction/CancelOrder\";\nimport {OpenOrder} from \"../Transaction/OpenOrder\";\nimport {DataStream} from \"./DataStream\";\nimport {ApiHeader} from \"./ApiHeader\";\nimport {CallOptions} from \"./CallOptions\";\nimport {QueryOrder} from \"../Transaction/QueryOrder\";\nimport {AccountInfoOptions} from \"../Account/AccountInfoOptions\";\nimport {IBinanceApiAuth} from \"../Account/Interfaces/IBinanceApiAuth\";\nimport {IDepositAddressReq} from \"../Deposit/Interfaces/IDepositAddressReq\";\nimport {IDepositHistoryReq} from '../Deposit/Interfaces/IDepositHistoryReq';\nimport {IWithdrawHistoryReq} from \"../Withdraw/Interfaces/IWithdrawHistoryReq\";\nimport {ICallOpts} from '../Rest/Interfaces/ICallOpts';\nimport request = require('request-promise');\nimport {Response} from \"request\";\nimport {TMethod} from \"./TMethod\";\n\nexport class BotHttp {\n\tpublic static BASE: string = 'https://api.binance.com';\n\tpublic auth: IBinanceApiAuth;\n\tpublic static fetch: Function = Fetch;\n\tpublic options: IBinanceOptions;\n\n\tstatic buildUrl(path: string, noData: boolean, data: object): string {\n\t\treturn `${BotHttp.BASE}${path.includes('/wapi') ? '' : '/api'}${path}${noData ? '' : BotHttp.makeQueryString(data)}`;\n\t}\n\n\tpublic async call(path: string, callOptions: CallOptions, payload?: any): Promise<any> {\n\t\tlet result: any;\n\t\ttry {\n\t\t\tresult = await this.fetch(path, callOptions, payload);\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tprivate async _fetch(url: string, callOptions: ICallOpts, payload: any):Promise<Response>{\n\t\tlet method: TMethod = callOptions.method;\n\t\tlet res: Promise<Response> = request[method.toLowerCase()]();\n\t}\n\tpublic async fetch(path: string, callOptions: CallOptions, payload: any): Promise<Response | HttpError> {\n\t\ttry {\n\n\t\t let res: Response =request.post();\n\n\n\t\t\tlet json = await res.json();\n\n\t\t\tif (res.ok === false) {\n\t\t\t\tlet error: HttpError = new HttpError(parseInt(res.status.toString()), res.statusText);\n\t\t\t\treturn Promise.reject(error);\n\t\t\t} else {\n\t\t\t\treturn <Response>json;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate getSignature(payload: any, timestamp: ITimestamp): string {\n\t\tlet signature: string;\n\t\tsignature = crypto.createHmac('sha256', this.options.auth.secret).update(BotHttp.makeQueryString(Object.assign(payload, timestamp)).substr(1)).digest('hex');\n\t\treturn signature;\n\t}\n\n\tprivate async getTimestamp(): Promise<ITimestamp> {\n\t\tlet time: ITimestamp = <ITimestamp>{};\n\t\tif (this.options.useServerTime) {\n\t\t\ttry {\n\t\t\t\ttime.timestamp = await this.timestamp();\n\t\t\t\treturn time;\n\t\t\t} catch (err) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t} else {\n\t\t\ttime.timestamp = Date.now();\n\t\t\treturn time;\n\t\t}\n\t}\n\n\tpublic static makeQueryString(params: any): string {\n\t\tlet result: string;\n\t\tlet keys: string[];\n\t\tkeys = Object.keys(params).filter(k => params[k]);\n\t\tif (!params) {\n\t\t\tresult = \"\";\n\t\t} else {\n\t\t\tresult = `?${keys.map(k => `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`).join('&')}`;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic async ping(): Promise<boolean> {\n\t\ttry {\n\t\t\tlet options: ICallOpts = <ICallOpts>{};\n\t\t\toptions.method = \"GET\";\n\t\t\toptions.json = true;\n\t\t\toptions.noExtra = false;\n\t\t\toptions.noData = true;\n\n\t\t\tlet config: CallOptions = new CallOptions(options, this.options.auth.key);\n\t\t\tawait this.call('/v1/ping', config);\n\t\t\treturn true;\n\t\t} catch (err) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tpublic async privateCall(path: string, callOptions: CallOptions, payload?: IWithdrawHistoryReq | IDepositHistoryReq | IDepositAddressReq | QueryOrder | NewOrder | Signed | CancelOrder | OpenOrder | DataStream | AccountInfoOptions): Promise<any> {\n\t\tlet result: any;\n\t\tlet signature: string;\n\t\tif (!payload) {\n\t\t\tpayload = new Signed();\n\t\t}\n\t\ttry {\n\t\t\tlet tStamp: ITimestamp = await this.getTimestamp();\n\t\t\tcallOptions.headers = new ApiHeader(this.options.auth.key);\n\t\t\tsignature = await this.getSignature(payload, tStamp);\n\n\t\t\tif (!callOptions.noExtra) {\n\t\t\t\tpayload.timestamp = tStamp.timestamp;\n\t\t\t\tpayload.signature = signature;\n\t\t\t} else {\n\t\t\t\tdelete payload.timestamp;\n\t\t\t}\n\t\t\tresult = await this.fetch(path, callOptions, payload);\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate async time(): Promise<IServerTime> {\n\t\ttry {\n\t\t\tlet server: IServerTime;\n\t\t\tlet options: ICallOpts = <ICallOpts>{};\n\t\t\toptions.method = \"GET\";\n\t\t\toptions.json = true;\n\t\t\toptions.noExtra = false;\n\t\t\toptions.noData = true;\n\t\t\tlet opts: CallOptions = new CallOptions(options, this.options.auth.key);\n\t\t\tserver = await this.call('/v1/time', opts);\n\t\t\treturn server;\n\t\t} catch (err) {\n\t\t\tthrow new Error(`Error in server time sync. Message: ${err}`);\n\t\t}\n\t}\n\n\tpublic async timestamp(): Promise<number> {\n\t\ttry {\n\t\t\tlet time: IServerTime = await this.time();\n\t\t\treturn time.serverTime;\n\t\t} catch (err) {\n\t\t\tthrow new Error(`Error in server time sync. Message: ${err}`);\n\t\t}\n\t}\n\n\tconstructor(options: IBinanceOptions) {\n\t\tthis.options = options;\n\t}\n}\n"]}