{
  "version": 3,
  "file": "BotHttp.js",
  "sourceRoot": "",
  "sources": [
    "../../src/Rest/BotHttp.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import * as Fetch from 'isomorphic-fetch'\r\nimport * as crypto from 'crypto'\r\nimport {HttpError} from \"../Error/HttpError\";\r\nimport {Auth} from \"../Account/Auth\";\r\nimport {IServerTime} from \"./Interfaces/IServerTime\";\r\nimport {EMethod} from \"./EMethod\";\r\nimport {IBinanceOptions} from \"../Binance/Interfaces/IBinanceOptions\";\r\nimport {ITimestamp} from \"./Interfaces/ITimestamp\";\r\nimport {BinanceError} from \"../Error/BinanceError\";\r\nimport {Signed} from \"./Signed\";\r\nimport {NewOrder} from \"../Transaction/NewOrder\";\r\nimport {CancelOrder} from \"../Transaction/CancelOrder\";\r\nimport {OpenOrder} from \"../Transaction/OpenOrder\";\r\nimport {DataStream} from \"./DataStream\";\r\nimport {ApiHeader} from \"./ApiHeader\";\r\nimport {CallOptions} from \"./CallOptions\";\r\nimport {QueryOrder} from \"../Transaction/QueryOrder\";\r\nimport {AccountInfoOptions} from \"../Account/AccountInfoOptions\";\r\nimport {IOrder} from \"../Transaction/Interfaces/IOrder\";\r\n\r\nexport class BotHttp {\r\n\tpublic static BASE: string = 'https://api.binance.com';\r\n\tpublic static fetch: Function = Fetch;\r\n\tpublic auth: Auth;\r\n\tpublic options: IBinanceOptions;\r\n\r\n\tpublic buildUrl(path: string, noData: boolean, data: object): string {\r\n\t\treturn `${BotHttp.BASE}${path.includes('/wapi') ? '' : '/api'}${path}${noData ? '' : BotHttp.makeQueryString(data)}`;\r\n\t}\r\n\r\n\tpublic call(path: string, callOptions: CallOptions, payload?: any): Promise<any> {\r\n\t\treturn new Promise(async (resolve, reject) => {\r\n\t\t\tlet result: any;\r\n\t\t\ttry {\r\n\t\t\t\tresult = await this.fetch(path, callOptions, payload);\r\n\t\t\t\tresolve(result);\r\n\t\t\t} catch (err) {\r\n\t\t\t\treject(err);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic fetch(path: string, callOptions: CallOptions, payload: any): Promise<Response | HttpError> {\r\n\t\treturn new Promise(async (resolve, reject)=>{\r\n\r\n\t\t\ttry{\r\n\t\t\t\tlet err: HttpError;\r\n\t\t\t\tlet url: string = this.buildUrl(path, callOptions.noData, payload);\r\n\t\t\t\tlet res: Response = await BotHttp.fetch(url, callOptions);\r\n\t\t\t\tlet json = await res.json();\r\n\t\t\t\tlet binanceError: BinanceError;\r\n\t\t\t\tlet errObj: HttpError = <HttpError>{\"message\": res.statusText, \"code\": res.status};\r\n\r\n\t\t\t\tif (json) {\r\n\t\t\t\t\tbinanceError = <BinanceError>json;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (res.ok === false) {\r\n\t\t\t\t\tif (!binanceError) {\r\n\t\t\t\t\t\terr = new HttpError(errObj);\r\n\t\t\t\t\t\treject(err);\r\n\t\t\t\t\t} else if (binanceError) {\r\n\t\t\t\t\t\terr = new HttpError(binanceError);\r\n\t\t\t\t\t\treject(err);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}else{\r\n\t\t\t\t\tresolve(<Response>json);\r\n\t\t\t\t}\r\n\t\t\t}catch(err){\r\n\t\t\t\treject(err);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprivate getSignature(payload: any, timestamp: ITimestamp): string {\r\n\t\tlet signature: string = crypto.createHmac('sha256', this.options.auth.secret).update(BotHttp.makeQueryString(Object.assign(payload, timestamp)).substr(1)).digest('hex');\r\n\t\treturn signature;\r\n\t}\r\n\r\n\tprivate getTimestamp(): Promise<ITimestamp> {\r\n\t\treturn new Promise(async (resolve, reject) => {\r\n\t\t\tlet time: ITimestamp = <ITimestamp>{};\r\n\t\t\tif (this.options.useServerTime) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\ttime.timestamp = await this.timestamp();\r\n\t\t\t\t\tresolve(time);\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\treject(err);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\ttime.timestamp = Date.now();\r\n\t\t\t\tresolve(time);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic static makeQueryString(params: any): string {\r\n\t\tlet result:string;\r\n\t\tlet keys: string[];\r\n\t\tkeys = Object.keys(params).filter(k => params[k]);\r\n\t\tif(!params){\r\n\t\t\tresult = \"\";\r\n\t\t}else{\r\n\t\t\tresult = `?${keys.map(k => `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`).join('&')}`;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic ping(): Promise<boolean> {\r\n\t\treturn new Promise(async (resolve, reject) => {\r\n\t\t\ttry{\r\n\t\t\t\tlet opts: CallOptions = new CallOptions(EMethod.GET, true, true, false, this.options.auth.key);\r\n\t\t\t\tawait this.call('/v1/ping', opts);\r\n\t\t\t\tresolve(true);\r\n\t\t\t}catch(err){\r\n\t\t\t\treject(err);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic privateCall(path: string, callOptions: CallOptions, payload?: IOrder | QueryOrder | NewOrder | Signed | CancelOrder | OpenOrder | DataStream | AccountInfoOptions): Promise<any> {\r\n\t\treturn new Promise(async (resolve, reject) => {\r\n\t\t\tlet result: any;\r\n\t\t\tlet signature: string;\r\n\t\t\tif (!payload) {\r\n\t\t\t\tpayload = new Signed();\r\n\t\t\t}\r\n\t\t\ttry {\r\n\t\t\t\tlet tStamp: ITimestamp = await this.getTimestamp();\r\n\t\t\t\tcallOptions.headers = new ApiHeader(this.options.auth.key);\r\n\t\t\t\tsignature = await this.getSignature(payload, tStamp);\r\n\r\n\t\t\t\tif (!callOptions.noExtra) {\r\n\t\t\t\t\tpayload.timestamp = tStamp.timestamp;\r\n\t\t\t\t\tpayload.signature = signature;\r\n\t\t\t\t}\r\n\t\t\t\tresult = await this.fetch(path, callOptions, payload);\r\n\t\t\t\tresolve(result);\r\n\t\t\t} catch (err) {\r\n\t\t\t\treject(err);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprivate time(): Promise<IServerTime> {\r\n\t\treturn new Promise(async (resolve, reject) => {\r\n\t\t\ttry{\r\n\t\t\t\tlet opts: CallOptions = new CallOptions(EMethod.GET, true, true, false, this.options.auth.key);\r\n\t\t\t\tlet server: IServerTime = await this.call('/v1/time', opts);\r\n\t\t\t\tresolve(server);\r\n\t\t\t}catch(err){\r\n\t\t\t\treject(`Error in server time sync. Message: ${err}`);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic timestamp(): Promise<number> {\r\n\t\treturn new Promise(async (resolve, reject) => {\r\n\t\t\ttry {\r\n\t\t\t\tlet time: IServerTime = await this.time();\r\n\t\t\t\tresolve(time.serverTime);\r\n\t\t\t} catch (err) {\r\n\t\t\t\treject(`Error in server time sync. Message: ${err}`);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tconstructor(options: IBinanceOptions) {\r\n\t\tthis.options = options;\r\n\t}\r\n}\r\n"
  ]
}