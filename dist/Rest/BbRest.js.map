{
  "version": 3,
  "file": "BbRest.js",
  "sourceRoot": "",
  "sources": [
    "../../src/Rest/BbRest.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import * as fetch from 'isomorphic-fetch'\r\nimport * as crypto from 'crypto'\r\nimport {HttpError} from \"../Error/HttpError\";\r\nimport {Auth} from \"../Account/Auth\";\r\nimport {ServerTime} from \"./Interfaces/ServerTime\";\r\nimport {eMethod} from \"./eMethod\";\r\nimport {iCallOpts} from \"./Interfaces/iCallOpts\";\r\nimport {iBinanceOptions} from \"../Binance/Interfaces/iBinanceOptions\";\r\n\r\nexport class BbRest{\r\n\tpublic static BASE: string = 'https://app.binance.com';\r\n\tpublic auth: Auth;\r\n\tpublic options:iBinanceOptions;\r\n\r\n\tpublic _call(path:string, data: any, callOptions: iCallOpts):Promise<any> {\r\n\t\treturn new Promise(async (resolve, reject) => {\r\n\t\t\tlet result: any;\r\n\t\t\tlet signature:string;\r\n\t\t\tlet timestamp: ServerTime;\r\n\t\t\tlet newData: any;\r\n\t\t\tlet headersInit:HeadersInit = [['X-MBX-APIKEY', this.auth.key]];\r\n\t\t\tlet headers:Headers = new Headers(headersInit);\r\n\t\t\tif(!callOptions){\r\n\t\t\t\tcallOptions = <iCallOpts>{};\r\n\t\t\t\tcallOptions.noData = false;\r\n\t\t\t}\r\n\r\n\t\t\tlet fetchPath:string = this.buildUrl(path, data, callOptions.noData);\r\n\t\t\tcallOptions.headers = headers;\r\n\t\t\tcallOptions.method = eMethod.GET;\r\n\t\t\tcallOptions.json = true;\r\n\r\n\t\t\tif (!this.auth.key || !this.auth.secret) {\r\n\t\t\t\tthrow new Error('You need to pass an API key and secret to make authenticated calls.');\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tif (data && this.options.useServerTime) {\r\n\t\t\t\t\ttimestamp = await this.call('/v1/time');\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttimestamp.serverTime = Date.now();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsignature = crypto.createHmac('sha256', this.auth.secret).update(this.makeQueryString({\r\n\t\t\t\t\t...data,\r\n\t\t\t\t\ttimestamp\r\n\t\t\t\t}).substr(1)).digest('hex');\r\n\t\t\t\tnewData = callOptions.noExtra ? data : {...data, timestamp, signature};\r\n\r\n\t\t\t\tresult = await this.fetch(fetchPath, newData, callOptions);\r\n\t\t\t\tresolve(result);\r\n\t\t\t}catch(err){\r\n\t\t\t\treject(err);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprivate buildUrl(path:string, data:object, noData:boolean):string{\r\n\t\treturn `${BbRest.BASE}${path.includes('/wapi') ? '' : '/app'}${path}${noData ? '' : this.makeQueryString(data)}`;\r\n\t}\r\n\r\n\tcall(path:string, data?: any, callOptions?: iCallOpts):Promise<any>{\r\n\t\treturn new Promise(async (resolve, reject) => {\r\n\t\t\tlet result:any;\r\n\t\t\tif(!callOptions){\r\n\t\t\t\tcallOptions = <iCallOpts>{};\r\n\t\t\t\tcallOptions.noData = false;\r\n\t\t\t}\r\n\t\t  try{\r\n\t\t\t\tresult = await this.fetch(path, data, callOptions);\r\n\t\t\t\tresolve(result);\r\n\t\t\t}catch(err){\r\n\t\t  \treject(err);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprivate checkParams(name: string, payload: object, requires: any[]): boolean {\r\n\t\tif (!payload) {\r\n\t\t\tthrow new Error('You need to pass a payload object.')\r\n\t\t}\r\n\r\n\t\trequires.forEach(r => {\r\n\t\t\tif (!payload[r] && isNaN(payload[r])) {\r\n\t\t\t\tthrow new Error(`Method ${name} requires ${r} parameter.`)\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn true\r\n\t}\r\n\r\n\tpublic fetch(path:string, payload:any, callOptions: iCallOpts):Promise<any>{\r\n\t\treturn new Promise(async (resolve, reject)=>{\r\n\t\t\tlet json:any;\r\n\t\t\tlet msg:string;\r\n\t\t\tlet err:HttpError;\r\n\t\t\tif(typeof callOptions.noData !== \"boolean\"){\r\n\t\t\t\tcallOptions.noData = false;\r\n\t\t\t}\r\n\r\n\t\t\tlet params:string = this.buildUrl(path, payload, callOptions.noData);\r\n\t\t\tlet reqOpts: RequestInit = <RequestInit>{};\r\n\t\t\treqOpts.method = eMethod[eMethod.GET];\r\n\t\t\treqOpts.headers = new Headers();\r\n\t\t\ttry{\r\n\t\t\t\tlet res:Response = await fetch(params, reqOpts);\r\n\t\t\t\tjson = await res.json();\r\n\t\t\t\tif (!res.ok) {\r\n\t\t\t\t\terr = new HttpError(res.statusText, json.code);\r\n\t\t\t\t\treject(err);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tresolve(json);\r\n\t\t\t\t}\r\n\t\t\t}catch(err){\r\n\t\t\t\treject(err);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tprivate makeQueryString(params:any):string{\r\n\t\tlet result:string;\r\n\t\tif(!params){\r\n\t\t\tresult = \"\";\r\n\t\t}else{\r\n\t\t\tconst esc = encodeURIComponent;\r\n\t\t\tresult = Object.keys(params).map(k => `?${esc(k)}=${esc(params[k])}`).join('&');\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tping():Promise<boolean>{\r\n\t\treturn new Promise(async (resolve, reject) => {\r\n\t\t\ttry{\r\n\t\t\t\tlet opts:iCallOpts = <iCallOpts>{};\r\n\t\t\t\topts.noData = true;\r\n\t\t\t\tlet res: object = await this.call('/v1/ping', null, opts);\r\n\t\t\t\tlet ping:boolean = (Object.keys(res).length === 0);\r\n\t\t\t\tif(ping){\r\n\t\t\t\t\tresolve(ping);\r\n\t\t\t\t}\r\n\t\t\t}catch(err){\r\n\t\t\t\treject(err);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\ttime():Promise<number>{\r\n\t\treturn new Promise(async (resolve, reject) => {\r\n\t\t\ttry{\r\n\t\t\t\tlet opts:iCallOpts = <iCallOpts>{};\r\n\t\t\t\tlet time:number;\r\n\t\t\t\topts.noData = true;\r\n\t\t\t\tlet server:ServerTime = await this.call('/v1/time', null, opts);\r\n\t\t\t\ttime = server.serverTime;\r\n\t\t\t\tresolve(time);\r\n\t\t\t}catch(err){\r\n\t\t\t\treject(`Error in server time sync. Message: ${err}`);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tconstructor(options:iBinanceOptions){\r\n\t\tthis.options = options;\r\n\t}\r\n}\r\n"
  ]
}