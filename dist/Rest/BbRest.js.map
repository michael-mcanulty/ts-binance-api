{
  "version": 3,
  "file": "BBRest.js",
  "sourceRoot": "",
  "sources": [
    "../../src/Rest/BBRest.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import * as Fetch from 'isomorphic-fetch'\r\nimport * as crypto from 'crypto'\r\nimport {HttpError} from \"../Error/HttpError\";\r\nimport {Auth} from \"../Account/Auth\";\r\nimport {IServerTime} from \"./Interfaces/IServerTime\";\r\nimport {EMethod} from \"./EMethod\";\r\nimport {ICallOpts} from \"./Interfaces/ICallOpts\";\r\nimport {iBinanceOptions} from \"../Binance/Interfaces/iBinanceOptions\";\r\n\r\nexport class BBRest {\r\n\tpublic static BASE: string = 'https://api.binance.com';\r\n\tpublic static fetch: Function = Fetch;\r\n\tpublic auth: Auth;\r\n\tpublic options:iBinanceOptions;\r\n\r\n\tpublic _call(path: string, data: any, callOptions: ICallOpts): Promise<any> {\r\n\t\treturn new Promise(async (resolve, reject) => {\r\n\t\t\tlet result: any;\r\n\t\t\tlet signature:string;\r\n\t\t\tlet timestamp: IServerTime;\r\n\t\t\tlet newData: any;\r\n\t\t\tlet headersInit:HeadersInit = [['X-MBX-APIKEY', this.auth.key]];\r\n\t\t\tlet headers:Headers = new Headers(headersInit);\r\n\t\t\tif(!callOptions){\r\n\t\t\t\tcallOptions = <ICallOpts>{};\r\n\t\t\t\tcallOptions.noData = false;\r\n\t\t\t}\r\n\r\n\t\t\tlet fetchPath:string = this.buildUrl(path, data, callOptions.noData);\r\n\t\t\tcallOptions.headers = headers;\r\n\t\t\tcallOptions.method = EMethod.GET;\r\n\t\t\tcallOptions.json = true;\r\n\r\n\t\t\tif (!this.auth.key || !this.auth.secret) {\r\n\t\t\t\tthrow new Error('You need to pass an API key and secret to make authenticated calls.');\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tif (data && this.options.useServerTime) {\r\n\t\t\t\t\ttimestamp = await this.call('/v1/time');\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttimestamp.serverTime = Date.now();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsignature = crypto.createHmac('sha256', this.auth.secret).update(BBRest.makeQueryString({\r\n\t\t\t\t\t...data,\r\n\t\t\t\t\ttimestamp\r\n\t\t\t\t}).substr(1)).digest('hex');\r\n\t\t\t\tnewData = callOptions.noExtra ? data : {...data, timestamp, signature};\r\n\r\n\t\t\t\tresult = await this.fetch(fetchPath, newData, callOptions);\r\n\t\t\t\tresolve(result);\r\n\t\t\t}catch(err){\r\n\t\t\t\treject(err);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprivate buildUrl(path:string, data:object, noData:boolean):string{\r\n\t\treturn `${BBRest.BASE}${path.includes('/wapi') ? '' : '/api'}${path}${noData ? '' : BBRest.makeQueryString(data)}`;\r\n\t}\r\n\r\n\tcall(path: string, data?: any, callOptions?: ICallOpts): Promise<any> {\r\n\t\treturn new Promise(async (resolve, reject) => {\r\n\t\t\tlet result:any;\r\n\t\t\tif(!callOptions){\r\n\t\t\t\tcallOptions = <ICallOpts>{};\r\n\t\t\t\tcallOptions.noData = false;\r\n\t\t\t}\r\n\t\t  try{\r\n\t\t\t\tresult = await this.fetch(path, data, callOptions);\r\n\t\t\t\tresolve(result);\r\n\t\t\t}catch(err){\r\n\t\t  \treject(err);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprivate checkParams(name: string, payload: object, requires: any[]): boolean {\r\n\t\tif (!payload) {\r\n\t\t\tthrow new Error('You need to pass a payload object.')\r\n\t\t}\r\n\r\n\t\trequires.forEach(r => {\r\n\t\t\tif (!payload[r] && isNaN(payload[r])) {\r\n\t\t\t\tthrow new Error(`Method ${name} requires ${r} parameter.`)\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn true\r\n\t}\r\n\r\n\tpublic fetch(path: string, payload: any, callOptions: ICallOpts): Promise<Response> {\r\n\t\treturn new Promise(async (resolve, reject)=>{\r\n\t\t\tlet json:any;\r\n\t\t\tlet err:HttpError;\r\n\t\t\tif(typeof callOptions.noData !== \"boolean\"){\r\n\t\t\t\tcallOptions.noData = false;\r\n\t\t\t}\r\n\t\t\tlet params:string = this.buildUrl(path, payload, callOptions.noData);\r\n\t\t\tlet reqOpts: RequestInit = <RequestInit>{};\r\n\t\t\treqOpts.method = EMethod[EMethod.GET];\r\n\t\t\treqOpts.headers = new Headers();\r\n\r\n\t\t\ttry{\r\n\t\t\t\tlet res: Response = await BBRest.fetch(params, reqOpts);\r\n\t\t\t\tjson = await res.json();\r\n\r\n\t\t\t\tif (res.ok === false) {\r\n\t\t\t\t\terr = new HttpError(json);\r\n\t\t\t\t\tif (typeof err.handler === \"function\") {\r\n\t\t\t\t\t\terr['handler'].executeApi(err).then(success => {\r\n\t\t\t\t\t\t\treject(err);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treject(new HttpError(json));\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tresolve(json);\r\n\t\t\t\t}\r\n\t\t\t}catch(err){\r\n\t\t\t\tif (typeof err.json === \"function\") {\r\n\t\t\t\t\tjson = await err.json();\r\n\t\t\t\t\tlet _error: HttpError = new HttpError(json);\r\n\t\t\t\t\tif (_error && typeof _error.handler === \"function\") {\r\n\t\t\t\t\t\t_error['handler'].executeApi(err).then(success => {\r\n\t\t\t\t\t\t\treject(err);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treject(new HttpError(_error));\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet _error: HttpError = new HttpError(err);\r\n\t\t\t\t\tif (_error && typeof _error.handler === \"function\") {\r\n\t\t\t\t\t\t_error['handler'].executeApi(err).then(success => {\r\n\t\t\t\t\t\t\treject(err);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treject(new HttpError(_error));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tpublic static makeQueryString(params: any): string {\r\n\t\tlet result:string;\r\n\t\tif(!params){\r\n\t\t\tresult = \"\";\r\n\t\t}else{\r\n\t\t\tresult = `?${Object.keys(params).map(k => `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`).join('&')}`;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tping():Promise<boolean>{\r\n\t\treturn new Promise(async (resolve, reject) => {\r\n\t\t\ttry{\r\n\t\t\t\tlet opts: ICallOpts = <ICallOpts>{};\r\n\t\t\t\topts.noData = true;\r\n\t\t\t\tlet res: Response = await this.call('/v1/ping', null, opts);\r\n\t\t\t\tresolve(true);\r\n\t\t\t}catch(err){\r\n\t\t\t\treject(err);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\ttime():Promise<number>{\r\n\t\treturn new Promise(async (resolve, reject) => {\r\n\t\t\ttry{\r\n\t\t\t\tlet opts: ICallOpts = <ICallOpts>{};\r\n\t\t\t\tlet time:number;\r\n\t\t\t\topts.noData = true;\r\n\t\t\t\tlet server: IServerTime = await this.call('/v1/time', null, opts);\r\n\t\t\t\ttime = server.serverTime;\r\n\t\t\t\tresolve(time);\r\n\t\t\t}catch(err){\r\n\t\t\t\treject(`Error in server time sync. Message: ${err}`);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tconstructor(options:iBinanceOptions){\r\n\t\tthis.options = options;\r\n\t}\r\n}\r\n"
  ]
}