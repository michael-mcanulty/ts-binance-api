{
  "version": 3,
  "file": "Rest.js",
  "sourceRoot": "",
  "sources": [
    "../../src/Rest/Rest.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import {BotHttp} from \"./BotHttp\";\nimport {EMethod} from \"./EMethod\";\nimport {IListenKey} from \"./IListenKey\";\nimport {IBinanceOptions} from \"../Binance/Interfaces/IBinanceOptions\";\nimport {ICandlesOptions} from \"../ExchangeInfo/Interfaces/ICandleOptions\";\nimport {CandleInterval} from \"../ExchangeInfo/CandleInterval\";\nimport {Candle} from \"../ExchangeInfo/Candle\";\nimport {IExchangeInfo} from \"./Interfaces/IExchangeInfo\";\nimport {Market} from \"../Market/Market\";\nimport {ISymbol} from \"ExchangeInfo/Interfaces/ISymbol\";\nimport {Binance} from \"../Binance/Binance\";\nimport {Bot} from \"../Index\";\nimport {NewOrder} from \"../Transaction/NewOrder\";\nimport {EOrderSide, EOrderType} from \"../Transaction/Interfaces/EOrderEnums\";\nimport {IOrder} from \"../Transaction/Interfaces/IOrder\";\nimport {Order} from \"../Transaction/Order\";\nimport {HttpError} from \"../Error/HttpError\";\nimport {CancelOrder} from \"../Transaction/CancelOrder\";\nimport {Signed} from \"./Signed\";\nimport {DataStream} from \"./DataStream\";\nimport {CallOptions} from \"./CallOptions\";\nimport {ICancelOrderResponse} from \"../Transaction/Interfaces/ICancelOrderResponse\";\nimport {ICancelOrder} from \"../Transaction/Interfaces/ICancelOrder\";\n\nexport class Rest extends BotHttp {\n\tpublic static listenKey: IListenKey;\n\n\tprivate _getCandlesInterval(symbol: string, interval:string, limit?: number): Promise<Candle[]>{\n\t\treturn new Promise(async (resolve, reject)=>{\n\t\t\ttry{\n\t\t\t\tlet candleOpts: ICandlesOptions = <ICandlesOptions>{};\n\t\t\t\tcandleOpts.symbol = symbol;\n\t\t\t\tcandleOpts.interval = interval;\n\t\t\t\tcandleOpts.limit = limit;\n\n\t\t\t\tlet callOpts: CallOptions = new CallOptions(EMethod.GET);\n\t\t\t\tlet raw: any[][] = await this.call('/v1/klines', callOpts, candleOpts);\n\t\t\t\tlet candles:Candle[] = Candle.fromHttpByInterval(raw, candleOpts.symbol, candleOpts.interval);\n\t\t\t\tcandles.forEach((candle) => {\n\t\t\t\t\tcandle.quoteAsset = Bot.binance.rest.getQuoteAssetName(symbol);\n\t\t\t\t});\n\t\t\t\tresolve(candles);\n\t\t\t}catch(err){\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t};\n\n\tpublic cancelOrder(cancelOrder: CancelOrder) {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tlet orderRes: ICancelOrderResponse;\n\t\t\t\tlet privateOrder: ICancelOrder | {} | HttpError;\n\t\t\t\tlet url: string = (Binance.options.test) ? \"/v3/order/test\" : \"/v3/order\";\n\t\t\t\tlet callOpts: CallOptions = new CallOptions(EMethod.DELETE, true, false, false);\n\t\t\t\tprivateOrder = await this.privateCall(url, callOpts, cancelOrder);\n\t\t\t\tif (this.options.test && (Object.keys(privateOrder).length === 0 && privateOrder.constructor === Object)) {\n\t\t\t\t\tresolve(<{}>privateOrder);\n\t\t\t\t} else {\n\t\t\t\t\tif (privateOrder instanceof HttpError) {\n\t\t\t\t\t\treject(privateOrder);\n\t\t\t\t\t} else {\n\t\t\t\t\t\torderRes = <ICancelOrderResponse>privateOrder;\n\t\t\t\t\t\tresolve(orderRes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic closeDataStream(): Promise<{}> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tlet result: object;\n\t\t\ttry{\n\t\t\t\tlet callOpts: CallOptions = new CallOptions(EMethod.DELETE, true, false, true);\n\t\t\t\tlet dStream: DataStream = new DataStream(Rest.listenKey);\n\t\t\t\tresult = await this.privateCall('/v1/userDataStream', callOpts, dStream);\n\t\t\t\tresolve(result);\n\t\t\t}catch(err){\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getCandles(symbols: string[], intervals:string[], limit?:number): Promise<CandleInterval[]>{\n\t\treturn new Promise(async (resolve, reject)=>{\n\t\t\ttry{\n\t\t\t\tlet candleIntervals:CandleInterval[]=[];\n\t\t\t\tfor(let symbol of symbols){\n\t\t\t\t\tfor(let interval of intervals){\n\t\t\t\t\t\tlet candles:Candle[] = await this._getCandlesInterval(symbol, interval, limit);\n\t\t\t\t\t\tlet ci = new CandleInterval(candles);\n\t\t\t\t\t\tcandleIntervals.push(ci);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresolve(candleIntervals);\n\t\t\t}catch(err){\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t};\n\n\tpublic getDataStream(): Promise<IListenKey> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tlet callOpts: CallOptions = new CallOptions(EMethod.POST, true, true, false);\n\t\t\t\tlet signed = new Signed();\n\t\t\t\tRest.listenKey = <IListenKey> await this.privateCall('/v1/userDataStream', callOpts, signed);\n\t\t\t\tresolve(Rest.listenKey);\n\t\t\t} catch (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getExchangeInfo(): Promise<IExchangeInfo> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tlet callOpts: CallOptions = new CallOptions(EMethod.GET, true, true, false, this.options.auth.key);\n\t\t\t\tlet info: IExchangeInfo = await this.call('/v1/exchangeInfo', callOpts);\n\t\t\t\tresolve(info);\n\t\t\t} catch (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t};\n\n\tpublic keepDataStream(): Promise<{}> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tlet result: object;\n\t\t\ttry {\n\t\t\t\tlet callOpts: CallOptions = new CallOptions(EMethod.PUT, true, false, true)\n\t\t\t\tlet dStream: DataStream = new DataStream(Rest.listenKey);\n\t\t\t\tresult = await this.privateCall('/v1/userDataStream', callOpts, dStream);\n\t\t\t\tresolve(result);\n\t\t\t} catch (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getQuoteAssetName(symbol: string): string {\n\t\tlet qa: string;\n\t\tlet marketFilter: Market[] = Binance.markets.filter(market => market.symbol === symbol);\n\t\tlet market: Market;\n\t\tif (marketFilter && marketFilter.length > 0) {\n\t\t\tmarket = marketFilter[0];\n\t\t\tqa = market.quoteAsset;\n\t\t}\n\t\treturn qa;\n\t}\n\n\tpublic marketBuy(symbol: string, quantity: number): Promise<Order | {}> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tlet type: EOrderType = EOrderType.MARKET;\n\t\t\t\tlet side: EOrderSide = EOrderSide.BUY;\n\t\t\t\tlet order: NewOrder = new NewOrder(quantity, side, symbol, type);\n\t\t\t\tlet orderRes: Order | {} = await this.newOrder(order);\n\t\t\t\tresolve(orderRes)\n\t\t\t} catch (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getMarkets(quoteAsset?: string): Promise<Market[]> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tlet info: IExchangeInfo = await this.getExchangeInfo();\n\t\t\t\tlet symbols: ISymbol[] = info.symbols;\n\t\t\t\tlet markets: Market[] = symbols.map(symbol => {\n\t\t\t\t\treturn new Market(symbol.symbol, symbol.baseAsset, symbol.quoteAsset, Market.GetLimitsFromBinanceSymbol(symbol));\n\t\t\t\t});\n\t\t\t\tBinance.markets = markets;\n\t\t\t\tresolve(markets);\n\t\t\t} catch (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic marketSell(symbol: string, quantity: number): Promise<NewOrder | {}> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry{\n\t\t\t\tlet type: EOrderType = EOrderType.MARKET;\n\t\t\t\tlet side: EOrderSide = EOrderSide.SELL;\n\t\t\t\tlet newOrder: NewOrder | {} = new NewOrder(quantity, side, symbol, type);\n\t\t\t\tresolve(newOrder);\n\t\t\t}catch(err){\n\t\t\t\treject(err)\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic newOrder(order: NewOrder): Promise<Order | HttpError | {}> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tlet orderRes: Order;\n\t\t\t\tlet privateOrder: IOrder | {} | HttpError;\n\t\t\t\tlet url: string = (Binance.options.test) ? \"/v3/order/test\" : \"/v3/order\";\n\t\t\t\tlet callOpts: CallOptions = new CallOptions(EMethod.POST, true, false, false);\n\t\t\t\tprivateOrder = await this.privateCall(url, callOpts, order);\n\t\t\t\tif (this.options.test && (Object.keys(privateOrder).length === 0 && privateOrder.constructor === Object)) {\n\t\t\t\t\tresolve(<{}>privateOrder);\n\t\t\t\t} else {\n\t\t\t\t\tif (privateOrder instanceof HttpError) {\n\t\t\t\t\t\treject(privateOrder);\n\t\t\t\t\t} else {\n\t\t\t\t\t\torderRes = new Order(<IOrder>privateOrder);\n\t\t\t\t\t\tresolve(orderRes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t}\n\n\tconstructor(options: IBinanceOptions) {\n\t\tsuper(options);\n\t}\n}"
  ]
}