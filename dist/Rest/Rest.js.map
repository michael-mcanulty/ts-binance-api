{"version":3,"file":"Rest.js","sourceRoot":"","sources":["../../src/Rest/Rest.ts"],"names":[],"mappings":"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","sourcesContent":["import {BotHttp} from \"./BotHttp\";\r\nimport {IListenKey} from \"./Interfaces/IListenKey\";\r\nimport {IBinanceOptions} from \"../Binance/Interfaces/IBinanceOptions\";\r\nimport {ICandleRequest} from \"../ExchangeInfo/Interfaces/ICandleRequest\";\r\nimport {CandleInterval} from \"../ExchangeInfo/CandleInterval\";\r\nimport {Candle} from \"../ExchangeInfo/Candle\";\r\nimport {Market} from \"../Market/Market\";\r\nimport {Binance} from \"../Binance/Binance\";\r\nimport {NewOrder} from \"../Transaction/NewOrder\";\r\nimport {ENewOrderRespType, EOrderSide, EOrderType} from \"../Transaction/Interfaces/EOrderEnums\";\r\nimport {IOrder} from \"../Transaction/Interfaces/IOrder\";\r\nimport {Order} from \"../Transaction/Order\";\r\nimport {HttpError} from \"../Error/HttpError\";\r\nimport {CancelOrder} from \"../Transaction/CancelOrder\";\r\nimport {DataStream} from \"./DataStream\";\r\nimport {CallOptions} from \"./CallOptions\";\r\nimport {ICancelOrderResponse} from \"../Transaction/Interfaces/ICancelOrderResponse\";\r\nimport {IQueryCancelOrder} from \"../Transaction/Interfaces/IQueryCancelOrder\";\r\nimport {OpenOrder} from \"../Transaction/OpenOrder\";\r\nimport {QueryOrder} from \"../Transaction/QueryOrder\";\r\nimport {IOpenOrder} from \"../Transaction/Interfaces/IOpenOrder\";\r\nimport {IQueryOrderResponse} from \"../Transaction/Interfaces/IQueryOrderResponse\";\r\nimport {AllOrders} from \"../Transaction/AllOrders\";\r\nimport {OutboundAccountInfo} from \"../Account/OutboundAccountInfo\";\r\nimport {Balance} from \"../Balances/Balance\";\r\nimport {AccountInfoOptions} from \"../Account/AccountInfoOptions\";\r\nimport {IOutboundAccountInfoRest} from \"../Account/Interfaces/IOutboundAccountInfoRest\";\r\nimport {INewOrder} from \"../Transaction/Interfaces/INewOrder\";\r\nimport {CancelOrderResponse} from \"../Transaction/CancelOrderResponse\";\r\nimport {TestOrder} from \"../Transaction/TestOrder\";\r\nimport {IExchangeInfo} from \"../ExchangeInfo/Interfaces/IExchangeInfo\";\r\nimport {ISymbol} from \"../ExchangeInfo/Interfaces/ISymbol\";\r\nimport {IDepositAddressResult} from \"../Deposit/Interfaces/IDepositAddressResult\";\r\nimport {IDepositAddressReq} from \"../Deposit/Interfaces/IDepositAddressReq\";\r\nimport {IDepositHistoryResult} from \"../Deposit/Interfaces/IDepositHistoryResult\";\r\nimport {IDepositHistoryReq} from \"../Deposit/Interfaces/IDepositHistoryReq\";\r\nimport {ISystemStatus} from \"../Binance/Interfaces/ISystemStatus\";\r\nimport {IWithdrawHistoryReq} from \"../Withdraw/Interfaces/IWithdrawHistoryReq\";\r\nimport {IWithdrawHistoryResult} from \"../Withdraw/Interfaces/IWithdrawHistoryResult\";\r\nimport {ILimitOrderOpts} from \"../Transaction/Interfaces/ILimitOrderOpts\";\r\nimport {IGetOrderOpts} from \"../Transaction/Interfaces/IGetOrderOpts\";\r\nimport {IQueryOrderOpts} from \"../Transaction/Interfaces/IQueryOrderOpts\";\r\nimport {IMarketOrderOpts} from \"../Transaction/Interfaces/IMarketOrderOpts\";\r\nimport {IGetAllOrdersOpts} from \"../Transaction/Interfaces/IGetAllOrdersOpts\";\r\nimport {ICallOpts} from \"../Rest/Interfaces/ICallOpts\";\r\nimport {ICancelOrderOpts} from \"../Transaction/Interfaces/ICancelOrderOpts\";\r\nimport {ITotalBalance} from \"../Balances/Interfaces/ITotalBalance\";\r\nimport {Price} from \"../Transaction/Price\";\r\nimport {IPrice} from \"../Transaction/Interfaces/IPrice\";\r\n\r\nexport class Rest extends BotHttp {\r\n\tpublic static listenKey: IListenKey;\r\n\r\n\tprivate async _cancelOrder(cancelOrder: CancelOrder): Promise<CancelOrderResponse> {\r\n\t\ttry {\r\n\t\t\tlet callConfig: ICallOpts = <ICallOpts>{};\r\n\t\t\tlet orderResRaw: ICancelOrderResponse;\r\n\t\t\tlet response: CancelOrderResponse;\r\n\t\t\tlet privateOrder: IQueryCancelOrder | HttpError | {};\r\n\t\t\tlet callOpts: CallOptions;\r\n\t\t\tcallConfig.uri = (Binance.options.test) ? `${BotHttp.BASE}/api/v3/order/test` : `${BotHttp.BASE}/api/v3/order`;\r\n\t\t\tcallConfig.method = 'DELETE';\r\n\t\t\tcallConfig.json = true;\r\n\t\t\tcallConfig.isSigned = true;\r\n\t\t\tcallConfig.qs = cancelOrder;\r\n\t\t\tcallOpts = new CallOptions(callConfig);\r\n\r\n\t\t\tprivateOrder = await this.privateCall(callOpts);\r\n\t\t\tif (privateOrder instanceof HttpError) {\r\n\t\t\t\treturn Promise.reject(privateOrder);\r\n\t\t\t} else {\r\n\t\t\t\torderResRaw = <ICancelOrderResponse>privateOrder;\r\n\t\t\t\tresponse = new CancelOrderResponse(orderResRaw);\r\n\t\t\t\treturn response;\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async _getCandlesInterval(candleOpts: ICandleRequest): Promise<Candle[]> {\r\n\t\tlet candles: Candle[];\r\n\t\tlet raw: any[][];\r\n\t\tlet callOpts: CallOptions;\r\n\t\tlet callConfig: ICallOpts = <ICallOpts>{};\r\n\t\tcallConfig.method = 'GET';\r\n\t\tcallConfig.uri = `${BotHttp.BASE}/api/v1/klines`;\r\n\t\tcallConfig.qs = candleOpts;\r\n\t\tcallConfig.isSigned = false;\r\n\t\tcallOpts = new CallOptions(callConfig);\r\n\r\n\t\ttry {\r\n\t\t\traw = await this.call(callOpts);\r\n\t\t\tcandles = Candle.fromHttpByInterval(raw, candleOpts.symbol, candleOpts.interval);\r\n\t\t\tcandles.forEach((candle) => {\r\n\t\t\t\tcandle.quoteAsset = Rest.getQuoteAssetName(candleOpts.symbol);\r\n\t\t\t});\r\n\t\t\treturn candles;\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t};\r\n\r\n\tprivate async _newOrder(order: NewOrder): Promise<Order | HttpError | TestOrder> {\r\n\t\tlet callOpts: CallOptions;\r\n\t\tlet callConfig: ICallOpts = <ICallOpts>{};\r\n\t\tlet orderRes: Order;\r\n\t\tlet privateOrder: IOrder | HttpError | TestOrder;\r\n\t\tcallConfig.uri = (Binance.options.test) ? `${BotHttp.BASE}/api/v3/order/test` : `${BotHttp.BASE}/api/v3/order`;\r\n\t\tcallConfig.method = 'POST';\r\n\t\tcallConfig.json = true;\r\n\t\tcallConfig.isSigned = true;\r\n\t\tcallConfig.qs = order.toObjLiteral();\r\n\r\n\t\ttry {\r\n\t\t\tcallOpts = new CallOptions(callConfig);\r\n\t\t\tprivateOrder = await this.privateCall(callOpts);\r\n\t\t\tif (this.options.test && (Object.keys(privateOrder).length === 0 && privateOrder.constructor === Object)) {\r\n\t\t\t\treturn Promise.reject(new TestOrder());\r\n\t\t\t} else {\r\n\t\t\t\tif (privateOrder instanceof HttpError) {\r\n\t\t\t\t\treturn Promise.reject(privateOrder);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet order: IOrder = <IOrder>privateOrder;\r\n\t\t\t\t\torderRes = new Order(order);\r\n\t\t\t\t\treturn orderRes;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async cancelOrder(options: ICancelOrderOpts): Promise<CancelOrderResponse> {\r\n\t\ttry {\r\n\t\t\tlet cancelResult: ICancelOrderResponse;\r\n\t\t\tlet result: CancelOrderResponse;\r\n\t\t\tlet cancelOrder: CancelOrder = new CancelOrder(options);\r\n\t\t\tif (cancelResult) {\r\n\t\t\t\tcancelResult = await this._cancelOrder(cancelOrder);\r\n\t\t\t\tresult = new CancelOrderResponse(<ICancelOrderResponse>cancelResult);\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async cancelOrdersBySymbol(options: ICancelOrderOpts): Promise<CancelOrderResponse[]> {\r\n\t\tlet cOpts: ICancelOrderOpts;\r\n\t\tlet symbolOrders: OpenOrder[];\r\n\t\tlet openOrders: OpenOrder[];\r\n\t\tlet cancelResp: CancelOrderResponse;\r\n\t\tlet results: CancelOrderResponse[] = [];\r\n\t\tlet config: IGetOrderOpts = <IGetOrderOpts>{};\r\n\t\tconfig.symbol = options.symbol;\r\n\t\tconfig.origClientOrderId = options.origClientOrderId;\r\n\t\tconfig.orderId = options.orderId;\r\n\t\tconfig.recvWindow = options.recvWindow;\r\n\r\n\t\ttry {\r\n\t\t\topenOrders = await this.getOpenOrders(config);\r\n\t\t\tif(!openOrders || openOrders.length === 0){\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\t\t\tsymbolOrders = openOrders.filter(order => order.symbol === config.symbol);\r\n\r\n\t\t\tfor (let order of symbolOrders) {\r\n\t\t\t\tcOpts = <ICancelOrderOpts>{};\r\n\t\t\t\tcOpts.orderId = order.orderId;\r\n\t\t\t\tcOpts.recvWindow = options.recvWindow;\r\n\t\t\t\tcOpts.origClientOrderId = order.clientOrderId;\r\n\t\t\t\tcOpts.symbol = order.symbol;\r\n\t\t\t\tcOpts.newClientOrderId = options.newClientOrderId;\r\n\t\t\t\tcancelResp = await this.cancelOrder(cOpts);\r\n\t\t\t\tresults.push(cancelResp);\r\n\t\t\t}\r\n\t\t\treturn results;\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async closeDataStream(): Promise<object> {\r\n\t\tlet callOpts: CallOptions;\r\n\t\tlet result: object;\r\n\t\tlet callConfig: ICallOpts = <ICallOpts>{};\r\n\t\tcallConfig.method = 'DELETE';\r\n\t\tcallConfig.json = true;\r\n\t\tcallConfig.isSigned = false;\r\n\t\tcallConfig.uri = `${BotHttp.BASE}/api/v1/userDataStream`;\r\n\t\tcallConfig.qs = new DataStream(Rest.listenKey);\r\n\r\n\t\ttry {\r\n\t\t\tcallOpts = new CallOptions(callConfig);\r\n\t\t\tresult = await this.privateCall(callOpts);\r\n\t\t\treturn result;\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getAccountInfo(recvWindow?: number): Promise<OutboundAccountInfo> {\r\n\t\tlet callOpts: CallOptions;\r\n\t\tlet accountInfoRest: IOutboundAccountInfoRest;\r\n\t\tlet info: OutboundAccountInfo;\r\n\t\tlet opts: AccountInfoOptions = new AccountInfoOptions(recvWindow);\r\n\t\tlet callConfig: ICallOpts = <ICallOpts>{};\r\n\t\tcallConfig.method = 'GET';\r\n\t\tcallConfig.json = true;\r\n\t\tcallConfig.isSigned = true;\r\n\t\tcallConfig.uri = `${BotHttp.BASE}/api/v3/account`;\r\n\t\tcallConfig.qs = opts;\r\n\r\n\t\ttry {\r\n\t\t\tcallOpts = new CallOptions(callConfig);\r\n\t\t\taccountInfoRest = await this.privateCall(callOpts);\r\n\t\t\tinfo = OutboundAccountInfo.fromBinanceRest(accountInfoRest);\r\n\t\t\treturn info;\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getAllOrders(options: IGetAllOrdersOpts): Promise<Order[]> {\r\n\t\tlet results: Order[];\r\n\t\tlet privateCall: IQueryOrderResponse[];\r\n\t\tlet query: AllOrders;\r\n\t\tlet callOpts: CallOptions;\r\n\t\tlet callConfig: ICallOpts = <ICallOpts>{};\r\n\t\tquery = new AllOrders(options);\r\n\t\tresults = [];\r\n\t\tcallConfig.method = 'GET';\r\n\t\tcallConfig.json = true;\r\n\t\tcallConfig.isSigned = true;\r\n\t\tcallConfig.uri = `${BotHttp.BASE}/api/v3/allOrders`;\r\n\t\tcallConfig.qs = query.toObjLiteral();\r\n\r\n\t\ttry {\r\n\t\t\tcallOpts = new CallOptions(callConfig);\r\n\t\t\tprivateCall = await this.privateCall(callOpts);\r\n\r\n\t\t\tif (Array.isArray(privateCall) && privateCall.length > 0) {\r\n\t\t\t\tresults = privateCall.map((qCall: IQueryOrderResponse) => {\r\n\t\t\t\t\tlet opts: IOrder = <IOrder>{};\r\n\t\t\t\t\topts.cummulativeQuoteQty = qCall.cummulativeQuoteQty;\r\n\t\t\t\t\topts.symbol = qCall.symbol;\r\n\t\t\t\t\topts.side = qCall.side;\r\n\t\t\t\t\topts.type = qCall.type;\r\n\t\t\t\t\topts.price = qCall.price;\r\n\t\t\t\t\topts.clientOrderId = qCall.clientOrderId;\r\n\t\t\t\t\topts.orderId = qCall.orderId;\r\n\t\t\t\t\topts.executedQty = qCall.executedQty;\r\n\t\t\t\t\topts.origQty = qCall.origQty;\r\n\t\t\t\t\topts.transactTime = qCall.time;\r\n\t\t\t\t\topts.status = qCall.status;\r\n\t\t\t\t\topts.signature = qCall.signature;\r\n\t\t\t\t\topts.timeInForce = qCall.timeInForce;\r\n\t\t\t\t\topts.isWorking = qCall.isWorking;\r\n\t\t\t\t\treturn new Order(opts);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\treturn results;\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getAvailableTotalBalance(quoteAsset: string, dollarBaseAsset: string = \"USDT\", primaryBaseAsset: string = \"BTC\"): Promise<ITotalBalance> {\r\n\t\ttry {\r\n\t\t\t//get BTC qty first\r\n\t\t\tlet balances: Balance[] = await this.getBalances();\r\n\t\t\tlet prices: Price[] = await this.getPrices();\r\n\t\t\tif (balances.length === 0) {\r\n\t\t\t\treturn Promise.reject(new Error(\"Error: Balances not working\"));\r\n\t\t\t}\r\n\r\n\t\t\tconst QA = quoteAsset;\r\n\t\t\tconst USDT = dollarBaseAsset;\r\n\t\t\tconst FA = \"BNB\";\r\n\t\t\tconst BTC = primaryBaseAsset;\r\n\r\n\t\t\tlet balVals: ITotalBalance[] = [];\r\n\t\t\tlet result: ITotalBalance = <ITotalBalance>{};\r\n\r\n\t\t\tbalances.forEach((bal: Balance) => {\r\n\t\t\t\tlet avail: ITotalBalance = <ITotalBalance>{};\r\n\t\t\t\tlet BA: string = bal.asset;\r\n\t\t\t\tlet available: number = bal.available;\r\n\r\n\t\t\t\tlet symbol: string;\r\n\r\n\t\t\t\tif (BA !== BTC && BTC !== QA) {\r\n\t\t\t\t\tsymbol = BA + BTC;\r\n\t\t\t\t\tlet exchangeValue: number = Price.GetPriceValue(prices, symbol);\r\n\t\t\t\t\tavail.quoteAsset = quoteAsset;\r\n\t\t\t\t\tlet totalBTCVal: number = available * exchangeValue;\r\n\t\t\t\t\tavail.totalVal = totalBTCVal * Price.GetPriceValue(prices, BTC + USDT);\r\n\t\t\t\t\tbalVals.push(avail);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (BA === BTC && BTC !== QA) {\r\n\t\t\t\t\t\tsymbol = BA + QA;\r\n\t\t\t\t\t\tavail.quoteAsset = quoteAsset;\r\n\t\t\t\t\t\tavail.totalVal = available * Price.GetPriceValue(prices, BTC + USDT);\r\n\t\t\t\t\t\tbalVals.push(avail);\r\n\t\t\t\t\t} else if (BTC === QA && BA !== BTC) {\r\n\t\t\t\t\t\tsymbol = BA + QA;\r\n\t\t\t\t\t\tlet exchangeValue: number = Price.GetPriceValue(prices, symbol);\r\n\t\t\t\t\t\tavail.quoteAsset = quoteAsset;\r\n\t\t\t\t\t\tavail.totalVal = available * exchangeValue;\r\n\t\t\t\t\t\tbalVals.push(avail);\r\n\t\t\t\t\t} else if (BTC === QA && BA === BTC) {\r\n\t\t\t\t\t\tsymbol = BA + QA;\r\n\t\t\t\t\t\tavail.quoteAsset = quoteAsset;\r\n\t\t\t\t\t\tavail.totalVal = available;\r\n\t\t\t\t\t\tbalVals.push(avail);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tresult.totalVal = balVals.reduce((prev, cur) => {\r\n\t\t\t\treturn prev + cur.totalVal;\r\n\t\t\t}, 0);\r\n\t\t\tresult.quoteAsset = quoteAsset;\r\n\t\t\treturn result;\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getBalances(recvWindow?: number, gtZeroOnly: boolean = true): Promise<Balance[]> {\r\n\t\ttry {\r\n\t\t\tlet balances: Balance[];\r\n\t\t\tlet accountInfo: OutboundAccountInfo = await this.getAccountInfo(recvWindow);\r\n\t\t\tbalances = accountInfo.balances;\r\n\r\n\t\t\tif (gtZeroOnly) {\r\n\t\t\t\tbalances = accountInfo.balances.filter(bal => bal.available > 0);\r\n\t\t\t} else {\r\n\t\t\t\tbalances = accountInfo.balances;\r\n\t\t\t}\r\n\t\t\treturn balances;\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getCandles(symbols: string[], intervals: string[], limit?: number): Promise<CandleInterval[]> {\r\n\t\ttry {\r\n\t\t\tlet candleIntervals: CandleInterval[] = [];\r\n\t\t\tfor (let symbol of symbols) {\r\n\t\t\t\tfor (let interval of intervals) {\r\n\t\t\t\t\tlet req: ICandleRequest = <ICandleRequest>{};\r\n\t\t\t\t\treq.symbol = symbol;\r\n\t\t\t\t\treq.interval = interval;\r\n\t\t\t\t\treq.limit = limit;\r\n\t\t\t\t\tlet candles: Candle[] = await this._getCandlesInterval(req);\r\n\t\t\t\t\tlet ci = new CandleInterval(candles);\r\n\t\t\t\t\tcandleIntervals.push(ci);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn candleIntervals;\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t};\r\n\r\n\tpublic async getDataStream(): Promise<IListenKey> {\r\n\t\tlet callOpts: CallOptions;\r\n\t\tlet callConfig: ICallOpts;\r\n\t\tcallConfig = <ICallOpts>{};\r\n\t\tcallConfig.method = 'POST';\r\n\t\tcallConfig.json = true;\r\n\t\tcallConfig.isSigned = true;\r\n\t\tcallConfig.uri = `${BotHttp.BASE}/api/v1/userDataStream`;\r\n\r\n\t\ttry {\r\n\t\t\tcallOpts = new CallOptions(callConfig);\r\n\t\t\tRest.listenKey = <IListenKey> await this.privateCall(callOpts);\r\n\t\t\treturn Rest.listenKey;\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getDepositAddress(request: IDepositAddressReq): Promise<IDepositAddressResult> {\r\n\t\tlet callOpts: CallOptions;\r\n\t\tlet callConfig: ICallOpts = <ICallOpts>{};\r\n\t\tcallConfig.method = 'GET';\r\n\t\tcallConfig.json = true;\r\n\t\tcallConfig.isSigned = true;\r\n\t\tcallConfig.uri = `${BotHttp.BASE}/wapi/v3/depositAddress.html`;\r\n\t\tcallConfig.qs = request;\r\n\r\n\t\ttry {\r\n\t\t\tcallOpts = new CallOptions(callConfig);\r\n\t\t\treturn <IDepositAddressResult> await this.privateCall(callOpts);\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getDepositHisory(request: IDepositHistoryReq): Promise<IDepositHistoryResult> {\r\n\t\tlet callOpts: CallOptions;\r\n\t\tlet callConfig: ICallOpts = <ICallOpts>{};\r\n\t\tcallConfig.method = 'GET';\r\n\t\tcallConfig.json = true;\r\n\t\tcallConfig.isSigned = true;\r\n\t\tcallConfig.uri = `${BotHttp.BASE}/wapi/v3/depositHistory.html`;\r\n\t\tcallConfig.qs = request;\r\n\t\ttry {\r\n\t\t\tcallOpts = new CallOptions(callConfig);\r\n\t\t\treturn <IDepositHistoryResult> await this.privateCall(callOpts);\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getExchangeInfo(): Promise<IExchangeInfo> {\r\n\t\tlet callOpts: CallOptions;\r\n\t\tlet callConfig: ICallOpts = <ICallOpts>{};\r\n\t\tcallConfig.method = 'GET';\r\n\t\tcallConfig.json = true;\r\n\t\tcallConfig.uri = `${BotHttp.BASE}/api/v1/exchangeInfo`;\r\n\r\n\t\ttry {\r\n\t\t\tcallOpts = new CallOptions(callConfig);\r\n\t\t\treturn <IExchangeInfo> await this.call(callOpts);\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t};\r\n\r\n\tpublic async getMarkets(quoteAsset?: string): Promise<Market[]> {\r\n\t\ttry {\r\n\t\t\tlet info: IExchangeInfo = await this.getExchangeInfo();\r\n\t\t\tlet symbols: ISymbol[] = info.symbols;\r\n\t\t\tlet markets: Market[] = symbols.map(symbol => {\r\n\t\t\t\treturn new Market(symbol.symbol, symbol.baseAsset, symbol.quoteAsset, Market.GetLimitsFromBinanceSymbol(symbol));\r\n\t\t\t});\r\n\t\t\tif(quoteAsset){\r\n\t\t\t\tlet _markets: Market[] = markets.filter(m=>m.quoteAsset===quoteAsset);\r\n\t\t\t\tBinance.markets = _markets;\r\n\t\t\t\treturn _markets;\r\n\t\t\t}else{\r\n\t\t\t\tBinance.markets = markets;\r\n\t\t\t\treturn markets;\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getOpenOrders(options: IGetOrderOpts): Promise<OpenOrder[]> {\r\n\t\tlet opts: IQueryOrderOpts = <IQueryOrderOpts>{};\r\n\t\tlet query: QueryOrder;\r\n\t\tlet callOpts: CallOptions;\r\n\t\tlet privateCall: IOpenOrder[];\r\n\t\tlet callConfig: ICallOpts = <ICallOpts>{};\r\n\r\n\t\ttry {\r\n\t\t\topts.symbol = options.symbol;\r\n\t\t\topts.recvWindow = options.recvWindow;\r\n\t\t\topts.orderId = options.orderId;\r\n\t\t\topts.origClientOrderId = options.origClientOrderId;\r\n\t\t\tquery = new QueryOrder(opts);\r\n\t\t\tcallConfig.method = 'GET';\r\n\t\t\tcallConfig.json = true;\r\n\t\t\tcallConfig.isSigned = true;\r\n\t\t\tcallConfig.uri = `${BotHttp.BASE}/api/v3/openOrders`;\r\n\t\t\tcallConfig.qs = query.toObjLiteral();\r\n\t\t\tcallOpts = new CallOptions(callConfig);\r\n\t\t\tprivateCall = await this.privateCall(callOpts);\r\n\t\t\tif (Array.isArray(privateCall) && privateCall.length > 0) {\r\n\t\t\t\treturn <OpenOrder[]> privateCall.map((o: IOpenOrder) => {\r\n\t\t\t\t\treturn new OpenOrder(o);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getOrder(options: IGetOrderOpts): Promise<Order> {\r\n\t\ttry {\r\n\t\t\tlet query: QueryOrder;\r\n\t\t\tlet callOpts: CallOptions;\r\n\t\t\tlet privateCall: IQueryOrderResponse;\r\n\t\t\tlet result: Order;\r\n\t\t\tlet opts: IQueryOrderOpts = <IQueryOrderOpts>{};\r\n\t\t\topts.symbol = options.symbol;\r\n\t\t\topts.recvWindow = options.recvWindow;\r\n\t\t\topts.orderId = options.orderId;\r\n\t\t\topts.origClientOrderId = options.origClientOrderId;\r\n\r\n\t\t\tquery = new QueryOrder(opts);\r\n\r\n\t\t\tlet callConfig: ICallOpts = <ICallOpts>{};\r\n\t\t\tcallConfig.method = 'GET';\r\n\t\t\tcallConfig.json = true;\r\n\t\t\tcallConfig.isSigned = true;\r\n\t\t\tcallConfig.uri = `${BotHttp.BASE}/api/v3/order`;\r\n\t\t\tcallConfig.qs = query.toObjLiteral();\r\n\t\t\tcallOpts = new CallOptions(callConfig);\r\n\t\t\tprivateCall = await this.privateCall(callOpts);\r\n\r\n\t\t\tif (privateCall && privateCall.hasOwnProperty(\"symbol\")) {\r\n\t\t\t\tlet nOrder: IOrder = <IOrder>{};\r\n\t\t\t\tnOrder.symbol = opts.symbol;\r\n\t\t\t\tnOrder.side = privateCall.side;\r\n\t\t\t\tnOrder.price = privateCall.price;\r\n\t\t\t\tnOrder.type = privateCall.type;\r\n\t\t\t\tnOrder.timeInForce = privateCall.timeInForce;\r\n\t\t\t\tnOrder.origQty = privateCall.origQty;\r\n\t\t\t\tnOrder.executedQty = privateCall.executedQty;\r\n\t\t\t\tnOrder.timestamp = privateCall.time;\r\n\t\t\t\tnOrder.status = privateCall.status;\r\n\t\t\t\tnOrder.orderId = opts.orderId;\r\n\t\t\t\tnOrder.clientOrderId = privateCall.clientOrderId;\r\n\t\t\t\tnOrder.cummulativeQuoteQty = privateCall.cummulativeQuoteQty;\r\n\t\t\t\tnOrder.status = privateCall.status;\r\n\t\t\t\tnOrder.signature = privateCall.signature;\r\n\t\t\t\tnOrder.transactTime = privateCall.time;\r\n\t\t\t\tnOrder.isWorking = privateCall.isWorking;\r\n\t\t\t\tresult = new Order(nOrder);\r\n\t\t\t\treturn result;\r\n\t\t\t} else {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getPrices(): Promise<Price[]> {\r\n\t\tlet rawPrices: IPrice[];\r\n\t\tlet callOpts: CallOptions;\r\n\t\tlet callConfig: ICallOpts = <ICallOpts>{};\r\n\t\tcallConfig.method = 'GET';\r\n\t\tcallConfig.json = true;\r\n\t\tcallConfig.isSigned = false;\r\n\t\tcallConfig.uri = `${BotHttp.BASE}/api/v3/ticker/price`;\r\n\r\n\t\ttry {\r\n\t\t\tcallOpts = new CallOptions(callConfig);\r\n\t\t\trawPrices = await this.call(callOpts);\r\n\t\t\tif (Array.isArray(rawPrices) && rawPrices.length > 0) {\r\n\t\t\t\treturn <Price[]> Price.toPrices(rawPrices);\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static getQuoteAssetName(symbol: string): string {\r\n\t\tlet qa: string;\r\n\t\tlet marketFilter: Market[] = Binance.markets.filter(market => market.symbol === symbol);\r\n\t\tlet market: Market;\r\n\t\tif (marketFilter && marketFilter.length > 0) {\r\n\t\t\tmarket = marketFilter[0];\r\n\t\t\tqa = market.quoteAsset;\r\n\t\t}\r\n\t\treturn qa;\r\n\t}\r\n\t//TODO: Check Signed on binance api docs  and match to callOptions of each method.\r\n\tpublic async getStatus(): Promise<ISystemStatus> {\r\n\t\tlet callConfig: ICallOpts = <ICallOpts>{};\r\n\t\tcallConfig.method = 'GET';\r\n\t\tcallConfig.json = true;\r\n\t\tcallConfig.isSigned = true;\r\n\t\tcallConfig.apiKey = this.options.auth.key;\r\n\t\tcallConfig.uri = `${BotHttp.BASE}/wapi/v3/systemStatus.html`;\r\n\r\n\t\ttry {\r\n\t\t\tlet opts: CallOptions = new CallOptions(callConfig);\r\n\t\t\treturn <ISystemStatus> await this.call(opts);\r\n\t\t} catch (err) {\r\n\t\t\treturn Promise.reject(new Error(`Error retrieving the system status. Message: ${err}`));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async getWithdrawHisory(request: IWithdrawHistoryReq): Promise<IWithdrawHistoryResult> {\r\n\t\tlet withdrawHistory: IWithdrawHistoryResult;\r\n\t\tlet callOpts: CallOptions;\r\n\t\tlet callConfig: ICallOpts = <ICallOpts>{};\r\n\t\tcallConfig.method = 'GET';\r\n\t\tcallConfig.json = true;\r\n\t\tcallConfig.isSigned = true;\r\n\t\tcallConfig.uri = `${BotHttp.BASE}/wapi/v3/withdrawHistory.html`;\r\n\t\tcallConfig.qs = request;\r\n\r\n\t\ttry {\r\n\t\t\tcallOpts = new CallOptions(callConfig);\r\n\t\t\twithdrawHistory = await this.privateCall(callOpts);\r\n\t\t\treturn withdrawHistory;\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async keepDataStream(): Promise<{}> {\r\n\t\tlet dStream: DataStream;\r\n\t\tlet callOpts: CallOptions;\r\n\t\tlet callConfig: ICallOpts = <ICallOpts>{};\r\n\t\tdStream = new DataStream(Rest.listenKey);\r\n\t\tcallConfig.method = 'PUT';\r\n\t\tcallConfig.json = true;\r\n\t\tcallConfig.isSigned = false;\r\n\t\tcallConfig.uri = `${BotHttp.BASE}/api/v1/userDataStream`;\r\n\t\tcallConfig.qs = dStream;\r\n\t\ttry {\r\n\t\t\tcallOpts = new CallOptions(callConfig);\r\n\t\t\treturn <{}> await this.privateCall( callOpts);\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async limitBuy(options: ILimitOrderOpts): Promise<Order | TestOrder> {\r\n\t\ttry {\r\n\t\t\tlet order: NewOrder;\r\n\t\t\tlet orderRes: Order | {};\r\n\t\t\tlet nOrder: INewOrder = <INewOrder>{};\r\n\r\n\t\t\tconst TYPE: EOrderType = EOrderType.LIMIT;\r\n\t\t\tconst SIDE: EOrderSide = EOrderSide.BUY;\r\n\t\t\tconst RESPONSE_TYPE: ENewOrderRespType = ENewOrderRespType.FULL;\r\n\r\n\t\t\tnOrder.recvWindow = options.recvWindow;\r\n\t\t\tnOrder.type = EOrderType[TYPE];\r\n\t\t\tnOrder.side = EOrderSide[SIDE];\r\n\t\t\tnOrder.quantity = options.quantity;\r\n\t\t\tnOrder.stopPrice = options.stopPrice;\r\n\t\t\tnOrder.icebergQty = options.iceburgQty;\r\n\t\t\tnOrder.newClientOrderId = options.newClientOrderId;\r\n\t\t\tnOrder.newOrderRespType = ENewOrderRespType[options.newOrderRespType] || ENewOrderRespType[RESPONSE_TYPE];\r\n\r\n\t\t\torder = new NewOrder(nOrder);\r\n\t\t\treturn await this._newOrder(order);\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async limitSell(options: ILimitOrderOpts): Promise<Order | TestOrder> {\r\n\t\ttry {\r\n\t\t\tlet order: NewOrder;\r\n\t\t\tlet nOrder: INewOrder = <INewOrder>{};\r\n\t\t\tconst TYPE: EOrderType = EOrderType.LIMIT;\r\n\t\t\tconst SIDE: EOrderSide = EOrderSide.SELL;\r\n\t\t\tconst RESPONSE_TYPE: ENewOrderRespType = ENewOrderRespType.FULL;\r\n\r\n\t\t\tnOrder.recvWindow = options.recvWindow;\r\n\t\t\tnOrder.type = EOrderType[TYPE];\r\n\t\t\tnOrder.side = EOrderSide[SIDE];\r\n\t\t\tnOrder.quantity = options.quantity;\r\n\t\t\tnOrder.stopPrice = options.stopPrice;\r\n\t\t\tnOrder.icebergQty = options.iceburgQty;\r\n\t\t\tnOrder.newClientOrderId = options.newClientOrderId;\r\n\t\t\tnOrder.newOrderRespType = ENewOrderRespType[options.newOrderRespType] || ENewOrderRespType[RESPONSE_TYPE];\r\n\r\n\t\t\torder = new NewOrder(nOrder);\r\n\t\t\treturn await this._newOrder(order);\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async marketBuy(options: IMarketOrderOpts): Promise<Order | TestOrder> {\r\n\t\ttry {\r\n\t\t\tlet order: NewOrder;\r\n\t\t\tlet nOrder: INewOrder = <INewOrder>{};\r\n\r\n\t\t\tconst TYPE: EOrderType = EOrderType.MARKET;\r\n\t\t\tconst SIDE: EOrderSide = EOrderSide.BUY;\r\n\t\t\tconst RESPONSE_TYPE: ENewOrderRespType = ENewOrderRespType.FULL;\r\n\r\n\t\t\tnOrder.recvWindow = options.recvWindow;\r\n\t\t\tnOrder.type = EOrderType[TYPE];\r\n\t\t\tnOrder.side = EOrderSide[SIDE];\r\n\t\t\tnOrder.quantity = options.quantity;\r\n\t\t\tnOrder.icebergQty = options.iceburgQty;\r\n\t\t\tnOrder.newClientOrderId = options.newClientOrderId;\r\n\t\t\tnOrder.newOrderRespType = ENewOrderRespType[options.newOrderRespType] || ENewOrderRespType[RESPONSE_TYPE];\r\n\r\n\t\t\torder = new NewOrder(nOrder);\r\n\t\t\treturn await this._newOrder(order);\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async marketSell(options: IMarketOrderOpts): Promise<Order | TestOrder> {\r\n\t\ttry {\r\n\t\t\tlet order: NewOrder;\r\n\t\t\tlet nOrder: INewOrder = <INewOrder>{};\r\n\r\n\t\t\tconst TYPE: EOrderType = EOrderType.MARKET;\r\n\t\t\tconst SIDE: EOrderSide = EOrderSide.SELL;\r\n\t\t\tconst RESPONSE_TYPE: ENewOrderRespType = ENewOrderRespType.FULL;\r\n\r\n\t\t\tnOrder.recvWindow = options.recvWindow;\r\n\t\t\tnOrder.type = EOrderType[TYPE];\r\n\t\t\tnOrder.side = EOrderSide[SIDE];\r\n\t\t\tnOrder.quantity = options.quantity;\r\n\t\t\tnOrder.icebergQty = options.iceburgQty;\r\n\t\t\tnOrder.newClientOrderId = options.newClientOrderId;\r\n\t\t\tnOrder.newOrderRespType = ENewOrderRespType[options.newOrderRespType] || ENewOrderRespType[RESPONSE_TYPE];\r\n\r\n\t\t\torder = new NewOrder(nOrder);\r\n\t\t\treturn await this._newOrder(order);\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor(options: IBinanceOptions) {\r\n\t\tsuper(options);\r\n\t}\r\n}"]}