{
  "version": 3,
  "file": "Rest.js",
  "sourceRoot": "",
  "sources": [
    "../../src/Rest/Rest.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import {BotHttp} from \"./BotHttp\";\nimport {ICallOpts} from \"./Interfaces/ICallOpts\";\nimport {EMethod} from \"./EMethod\";\nimport {IListenKey} from \"./IListenKey\";\nimport {IBinanceOptions} from \"../Binance/Interfaces/IBinanceOptions\";\nimport {iCandlesOptions} from \"../ExchangeInfo/Interfaces/ICandleOptions\";\nimport {CandleInterval} from \"../ExchangeInfo/CandleInterval\";\nimport {Candle} from \"../ExchangeInfo/Candle\";\nimport {IExchangeInfo} from \"./Interfaces/IExchangeInfo\";\nimport {Market} from \"../Market/Market\";\nimport {ISymbol} from \"ExchangeInfo/Interfaces/ISymbol\";\nimport {Binance} from \"../Binance/Binance\";\nimport {Bot} from \"../Index\";\nimport {Order} from \"../Transaction/Order\";\nimport {NewOrder} from \"../Transaction/NewOrder\";\n\nexport class Rest extends BotHttp {\n\tpublic static listenKey: IListenKey;\n\n\tprivate _getCandlesInterval(symbol: string, interval:string, limit?: number): Promise<Candle[]>{\n\t\treturn new Promise(async (resolve, reject)=>{\n\t\t\ttry{\n\t\t\t\tlet candleOpts:iCandlesOptions = <iCandlesOptions>{};\n\t\t\t\tcandleOpts.symbol = symbol;\n\t\t\t\tcandleOpts.interval = interval;\n\t\t\t\tcandleOpts.limit = limit;\n\t\t\t\tlet raw: any[][] = await this.call('/v1/klines', candleOpts);\n\t\t\t\tlet candles:Candle[] = Candle.fromHttpByInterval(raw, candleOpts.symbol, candleOpts.interval);\n\t\t\t\tcandles.forEach((candle) => {\n\t\t\t\t\tcandle.quoteAsset = Bot.binance.rest.getQuoteAssetName(symbol);\n\t\t\t\t});\n\t\t\t\tresolve(candles);\n\t\t\t}catch(err){\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t};\n\n\tpublic closeDataStream(): Promise<{}> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tlet result: object;\n\t\t\ttry{\n\t\t\t\tlet callOpts: ICallOpts = <ICallOpts>{};\n\t\t\t\tcallOpts.method = EMethod.DELETE;\n\t\t\t\tcallOpts.noData = false;\n\t\t\t\tcallOpts.noExtra = true;\n\t\t\t\tresult = await this.privateCall('/v1/userDataStream', Rest.listenKey, callOpts);\n\t\t\t\tresolve(result);\n\t\t\t}catch(err){\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getCandles(symbols: string[], intervals:string[], limit?:number): Promise<CandleInterval[]>{\n\t\treturn new Promise(async (resolve, reject)=>{\n\t\t\ttry{\n\t\t\t\tlet candleIntervals:CandleInterval[]=[];\n\t\t\t\tfor(let symbol of symbols){\n\t\t\t\t\tfor(let interval of intervals){\n\t\t\t\t\t\tlet candles:Candle[] = await this._getCandlesInterval(symbol, interval, limit);\n\t\t\t\t\t\tlet ci = new CandleInterval(candles);\n\t\t\t\t\t\tcandleIntervals.push(ci);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresolve(candleIntervals);\n\t\t\t}catch(err){\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t};\n\n\tpublic newOrder(order: NewOrder, options: ICallOpts): Promise<Order> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tlet url: string = (Binance.options.test) ? \"/v3/order/test\" : \"/v3/order\";\n\t\t\t\tawait this.privateCall(url, order, options);\n\t\t\t} catch (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getQuoteAssetName(symbol: string): string {\n\t\tlet qa: string;\n\t\tlet marketFilter: Market[] = Binance.markets.filter(market => market.symbol === symbol);\n\t\tlet market: Market;\n\t\tif (marketFilter && marketFilter.length > 0) {\n\t\t\tmarket = marketFilter[0];\n\t\t\tqa = market.quoteAsset;\n\t\t}\n\t\treturn qa;\n\t}\n\n\tpublic getDataStream(): Promise<IListenKey> {\n\t\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t\ttry{\n\t\t\t\t\tlet callOpts: ICallOpts = <ICallOpts>{};\n\t\t\t\t\tcallOpts.method = EMethod.POST;\n\t\t\t\t\tcallOpts.noData = true;\n\t\t\t\t\tcallOpts.noExtra = false;\n\t\t\t\t\tRest.listenKey = <IListenKey> await this.privateCall('/v1/userDataStream', null, callOpts);\n\t\t\t\t\tresolve(Rest.listenKey);\n\t\t\t\t}catch(err){\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tpublic getMarkets(quoteAsset?: string): Promise<Market[]> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tlet info: IExchangeInfo = await this.getExchangeInfo();\n\t\t\t\tlet symbols: ISymbol[] = info.symbols;\n\t\t\t\tlet markets: Market[] = symbols.map(symbol => {\n\t\t\t\t\treturn new Market(symbol.symbol, symbol.baseAsset, symbol.quoteAsset, Market.GetLimitsFromBinanceSymbol(symbol));\n\t\t\t\t});\n\t\t\t\tBinance.markets = markets;\n\t\t\t\tresolve(markets);\n\t\t\t} catch (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getExchangeInfo(): Promise<IExchangeInfo>{\n\t\treturn new Promise(async (resolve, reject)=>{\n\t\t\ttry{\n\t\t\t\tlet opts: ICallOpts = <ICallOpts>{};\n\t\t\t\topts.noData = true;\n\t\t\t\topts.headers = new Headers();\n\t\t\t\topts.method = EMethod.GET;\n\t\t\t\topts.json = true;\n\t\t\t\tlet info: IExchangeInfo = await this.call('/v1/exchangeInfo', null, opts);\n\t\t\t\tresolve(info);\n\t\t\t}catch(err){\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t};\n\n\tpublic keepDataStream(): Promise<{}> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tlet result: object;\n\t\t\ttry{\n\t\t\t\tlet callOpts: ICallOpts = <ICallOpts>{};\n\t\t\t\tcallOpts.method = EMethod.PUT;\n\t\t\t\tcallOpts.noData = false;\n\t\t\t\tcallOpts.noExtra = true;\n\t\t\t\tresult = await this.privateCall('/v1/userDataStream', Rest.listenKey, callOpts);\n\t\t\t\tresolve(result);\n\t\t\t}catch(err){\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t}\n\n\tconstructor(options: IBinanceOptions) {\n\t\tsuper(options);\n\t}\n}"
  ]
}