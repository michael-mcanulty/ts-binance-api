{"version":3,"file":"Bot.js","sourceRoot":"","sources":["../src/Bot.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6DAAwD;AAExD,+CAA0C;AAI1C;IAGC,YAAY,IAAqB;QAChC,iBAAO,CAAC,OAAO,GAAG,IAAI,CAAC;QACvB,GAAG,CAAC,OAAO,GAAG,IAAI,iBAAO,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;CACD;AAPD,kBAOC;AAED,IAAI,IAAI,GAAqC,EAAE,CAAC;AAChD,IAAI,IAAI,GAAmB,IAAI,+BAAc,EAAE,CAAC;AAChD,IAAI,CAAC,GAAG,GAAG,kEAAkE,CAAC;AAC9E,IAAI,CAAC,MAAM,GAAG,kEAAkE,CAAC;AACjF,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;AAClB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;AAE1B,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;AAC1B,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAM,OAAO,EAAC,EAAE;IAEvC,IAAI,CAAC;QACJ,IAAI,QAAQ,GAAsB,MAAM,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;QACrG,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IA2BvB,CAAC;IAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACd,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAClB,CAAC;AACF,CAAC,CAAA,CAAC,CAAC","sourcesContent":["import {BinanceApiAuth} from \"./Account/BinanceApiAuth\";\nimport {IBinanceOptions} from \"./Binance/Interfaces/IBinanceOptions\";\nimport {Binance} from \"./Binance/Binance\";\nimport {Order} from \"./Transaction/Order\";\nimport {TestOrder} from \"./Transaction/TestOrder\";\n\nexport class Bot {\n\tpublic static binance: Binance;\n\n\tconstructor(opts: IBinanceOptions) {\n\t\tBinance.options = opts;\n\t\tBot.binance = new Binance(opts);\n\t}\n}\n\nlet opts: IBinanceOptions = <IBinanceOptions>{};\nlet auth: BinanceApiAuth = new BinanceApiAuth();\nauth.key = \"S05wQBtvZ8LmuAkqiDMXWKvJI1SBeR9H6kE9poWQVeA6MLGp508h7gLX0Wce92u6\";\nauth.secret = \"iDCk1PtTyucLSlj5wRYIeSrphteLX2ESRONkcsxjhbg2PubidzGps34bKw98tm2D\";\nopts.auth = auth;\nopts.test = false;\nopts.useServerTime = true;\n\nconst bot = new Bot(opts);\nBot.binance.init().then(async markets => {\n\n\ttry {\n\t\tlet buyStorm: Order | TestOrder = await Bot.binance.rest.limitBuy(\"STORMBTC\", 550, 0.00000155, 5000);\n\t\tconsole.log(buyStorm);\n\n\t\t//Bot.binance.websocket.candles([\"STORMBTC\", \"STORMUSDT\"], [\"1m\", \"1hr\"], res=>{\n\t\t//\tconsole.log(res);\n\t\t//});\n\t\t/*\n\t\t\t\tBot.binance.websocket.orders(res=>{console.log(res)});\n\t\t\t\tsetTimeout(async( )=>{\n\t\t\t\t\tlet sellStorm: Order | TestOrder = await Bot.binance.rest.limitSell(\"STORMBTC\", 550, 0.00000555, 5000);\n\t\t\t\t\tconsole.log(sellStorm);\n\t\t\t\t}, 3000);\n\t\t*/\n\t\t//let allOrders:Order[]= await Bot.binance.rest.getAllOrders(\"ETHUSDT\", 100, null, 5000);\n\t\t//console.log(allOrders);\n\n\t\t//let openOrders:OpenOrder[] = await Bot.binance.rest.getOpenOrders(\"STORMBTC\");\n\t\t//console.log(openOrders);\n\n\t\t//let bals: Balance[] = await Bot.binance.rest.getBalances(5000, true);\n\t\t//console.log(bals);\n\n\t\t//let cancel = await Bot.binance.rest.cancelOrder(\"STORMBTC\", 17753723);\n\t\t//console.log(cancel);\n\n\t\t//let cancel:any = await Bot.binance.rest.cancelOrdersBySymbol(\"STORMBTC\");\n\t\t//console.log(cancel);\n\n\t} catch (err) {\n\t\tconsole.log(err);\n\t}\n});\n\n"]}