{"version":3,"file":"HttpErrorHandler.js","sourceRoot":"","sources":["../../src/Error/HttpErrorHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import {EMethod} from \"../Rest/EMethod\";\r\nimport {BotHttp} from \"../Rest/BotHttp\";\r\nimport {NodeMailer} from \"./Email/NodeMailer\";\r\nimport {IEmailOptions} from \"./Email/Interfaces/IServiceOprtions\";\r\nimport {IMessageOptions} from \"./Email/Interfaces/IMessageOptions\";\r\nimport {BinanceError} from \"./BinanceError\";\r\nimport {HttpError} from \"./HttpError\";\r\nimport {EErrorType} from \"./Email/Enums/EErrorType\";\r\n\r\nexport class HttpErrorHandler {\r\n\tcode: number;\r\n\temailAddress?: string;\r\n\temailOptions?: IEmailOptions;\r\n\tprivate static emailService: NodeMailer;\r\n\tendpoint: string;\r\n\tmessage: string;\r\n\tmethod: string;\r\n\tpayload?: any[];\r\n\tport: number;\r\n\tsendEmail: boolean;\r\n\ttype: string;\r\n\turl: string;\r\n\r\n\thandleError(error: BinanceError | HttpError): Promise<any> {\r\n\t\treturn new Promise(async (resolve, reject) => {\r\n\t\t\tif (this.port !== null && this.method !== null) {\r\n\t\t\t\tlet url: string = this.url;\r\n\t\t\t\tlet reqOpts: RequestInit = <RequestInit>{};\r\n\t\t\t\treqOpts.method = EMethod[this.method];\r\n\t\t\t\treqOpts.headers = new Headers();\r\n\r\n\t\t\t\tif (this.payload && this.payload.length > 0) {\r\n\t\t\t\t\turl = BotHttp.buildUrl(this.url, false, this.payload);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.sendEmail && this.emailOptions) {\r\n\t\t\t\t\tHttpErrorHandler.emailService = new NodeMailer(this.emailOptions);\r\n\t\t\t\t\tlet msgOptions: IMessageOptions = <IMessageOptions>{};\r\n\t\t\t\t\tmsgOptions.from = this.emailAddress;\r\n\t\t\t\t\tmsgOptions.to = this.emailAddress;\r\n\t\t\t\t\tlet message: string = (this.type === EErrorType[EErrorType.Binance]) ? error['msg'] : error['message'];\r\n\t\t\t\t\tmsgOptions.subject = `A new ${EErrorType[this.type] || \"Unknown\"} error has been received | ${message}`;\r\n\t\t\t\t\tmsgOptions.text = `${new Date().toLocaleDateString()} : \\n Code: ${error.code} \\n Message: ${message}`;\r\n\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tawait HttpErrorHandler.emailService.sendEmail(msgOptions);\r\n\t\t\t\t\t} catch (err) {\r\n\t\t\t\t\t\treject(err);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\ttry {\r\n\t\t\t\t\tlet fetch: any = {};\r\n\t\t\t\t\t//fetch = await BotHttp.fetch(url, reqOpts);\r\n\t\t\t\t\tresolve(fetch);\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\treject(err);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tconstructor(code: number, endpoint: string, port: number, type: EErrorType, method: EMethod, sendEmail: boolean, emailAddress?: string, emailOptions?: IEmailOptions) {\r\n\t\tthis.code = code;\r\n\t\tthis.type = EErrorType[type];\r\n\t\tthis.port = port || null;\r\n\t\tthis.method = EMethod[method];\r\n\t\tthis.emailAddress = emailAddress || null;\r\n\t\tthis.sendEmail = sendEmail || false;\r\n\t\tthis.endpoint = endpoint;\r\n\t\tthis.url = `${this.endpoint}:${this.port}`;\r\n\t}\r\n}\r\n"]}