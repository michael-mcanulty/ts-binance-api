{"version":3,"file":"HttpErrorHandler.js","sourceRoot":"","sources":["../../src/Error/HttpErrorHandler.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6CAAwC;AACxC,6CAAwC;AACxC,mDAA8C;AAE9C,2DAAsD;AACtD,iDAA4C;AAE5C,wEAAmE;AACnE,2CAAsC;AAEtC;IAcQ,MAAM,CAAC,UAAU,CAAC,GAAc;QACtC,MAAM,CAAC,qBAAS,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,OAAO,YAAY,qBAAS,CAAC;IACvE,CAAC;IAED,eAAe,CAAC,IAAY,EAAE,OAAe,EAAE,MAAe,EAAE,QAAgB,EAAE,QAA0B;QAC3G,MAAM,CAAC,IAAI,OAAO,CAAC,CAAO,OAAO,EAAE,MAAM,EAAE,EAAE;YAE5C,EAAE,CAAC,CAAC,MAAM,IAAI,SAAS,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACxD,IAAI,SAAS,GAAa,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAA,CAAC,CAAU,QAAQ,CAAA,CAAC,CAAU,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;gBACrG,IAAI,CAAC,MAAM,GAAG,iBAAO,CAAC,MAAM,CAAC,CAAC;gBAC9B,IAAI,OAAO,GAA6B,EAAE,CAAC;gBAC3C,IAAI,GAAW,CAAC;gBAChB,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC7B,OAAO,CAAC,OAAO,GAAY,EAAE,CAAC;gBAC9B,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;gBACxD,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;gBACpB,EAAE,CAAA,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,iBAAiB,IAAI,QAAQ,CAAC,CAAC,CAAA,CAAC;oBACxD,OAAO,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA,CAAC,CAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAC,UAAU,EAAE,QAAQ,EAAC,CAAC,CAAC;gBACpG,CAAC;gBAED,GAAG,CAAA,CAAC,IAAI,QAAQ,IAAI,SAAS,CAAC,CAAA,CAAC;oBAC9B,IAAI,CAAC;wBACJ,IAAI,KAAK,GAAQ,EAAE,CAAC;wBACpB,KAAK,GAAG,MAAM,iBAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;oBAChD,CAAC;oBAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACd,mBAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBACpB,MAAM,CAAC,GAAG,CAAC,CAAC;oBACb,CAAC;gBACF,CAAC;YACF,CAAC;YAGD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAClE,gBAAgB,CAAC,WAAW,GAAG,IAAI,uBAAU,EAAE,CAAC;gBAChD,IAAI,CAAC,YAAY,CAAC,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAE,CAAA,CAAC,CAAC,SAAS,uBAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,SAAS,8BAA8B,OAAO,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;gBACnN,IAAI,CAAC,YAAY,CAAC,IAAI,GAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAE,CAAA,CAAC,CAAA,GAAG,IAAI,IAAI,EAAE,CAAC,kBAAkB,EAAE,eAAe,IAAI,gBAAgB,OAAO,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;gBAEjM,IAAI,CAAC;oBACJ,MAAM,gBAAgB,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBACxF,CAAC;gBAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACd,mBAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBACpB,MAAM,CAAC,GAAG,CAAC,CAAC;gBACb,CAAC;YACF,CAAC;YACD,OAAO,EAAE,CAAC;QACX,CAAC,CAAA,CAAC,CAAC;IACJ,CAAC;IAED,YACC,IAAgB,EAChB,SAAmB,EACnB,QAA0B,EAC1B,gBAAkC,EAClC,YAA8B;QAE9B,IAAI,OAAO,GAAqC,EAAE,CAAC;QACnD,OAAO,CAAC,EAAE,GAAG,gBAAgB,CAAC,sBAAsB,CAAC;QACrD,IAAI,CAAC,IAAI,GAAG,uBAAU,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,KAAK,CAAC;QACpC,IAAI,CAAC,QAAQ,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAA,CAAC,CAAU,QAAQ,CAAA,CAAC,CAAU,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC3F,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC,uBAAuB,CAAC;QAEjE,EAAE,CAAA,CAAC,gBAAgB,IAAI,OAAO,gBAAgB,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAA,CAAC;YACjE,IAAI,CAAC,gBAAgB,GAAG,IAAI,+BAAc,CAAC,gBAAgB,CAAC,CAAC;QAC9D,CAAC;QACD,IAAI,CAAC,YAAY,GAAG,YAAY,IAAI,OAAO,CAAC;IAC7C,CAAC;CACD;AAjFD,4CAiFC","sourcesContent":["import {EMethod} from \"../Rest/EMethod\";\r\nimport {BotHttp} from \"../Rest/BotHttp\";\r\nimport {NodeMailer} from \"./Email/NodeMailer\";\r\nimport {IMessageOptions} from \"./Email/Interfaces/IMessageOptions\";\r\nimport {ServiceOptions} from \"./Email/ServiceOptions\";\r\nimport {BBLogger} from \"../Logger/BBLogger\";\r\nimport {IServiceOptions} from \"./Email/Interfaces/IServiceOptions\";\r\nimport {EErrorType} from \"../../dist/Error/Email/Enums/EErrorType\";\r\nimport {HttpError} from \"./HttpError\";\r\n\r\nexport class HttpErrorHandler {\r\n\tpublic static mailService: NodeMailer;\r\n\tpublic static defaultErrMsgRecipient: string;\r\n\tpublic static defaultEmailServiceOpts: ServiceOptions;\r\n\tendpoint?: string[];\r\n\tmethod?: string;\r\n\tpayload?: any;\r\n\tkillAppOnError?: boolean;\r\n\temailMsgOpts?: IMessageOptions;\r\n\temailServiceOpts?: ServiceOptions;\r\n\tkillWorkerOnError: boolean;\r\n\tsendEmail: boolean;\r\n\ttype: string;\r\n\r\n\tpublic static hasHandler(err: HttpError){\r\n\t\treturn HttpError.isHttpError(err) && err.handler instanceof HttpError;\r\n\t}\r\n\r\n\thandleException(code: number, message: string, method: EMethod, workerId: number, endpoint?: string|string[]): Promise<any> {\r\n\t\treturn new Promise(async (resolve, reject) => {\r\n\t\t\t//posts message via REST\r\n\t\t\tif (method != undefined && (this.endpoint || endpoint)) {\r\n\t\t\t\tlet _endpoint: string[] = (Array.isArray(endpoint))?<string[]>endpoint:<string[]>new Array(endpoint);\r\n\t\t\t\tthis.method = EMethod[method];\r\n\t\t\t\tlet reqOpts: RequestInit = <RequestInit>{};\r\n\t\t\t\tlet url: string;\r\n\t\t\t\treqOpts.method = this.method;\r\n\t\t\t\treqOpts.headers = <Headers>{};\r\n\t\t\t\treqOpts.headers.set(\"Content-Type\", \"application/json\");\r\n\t\t\t\treqOpts.body = null;\r\n\t\t\t\tif(this.payload || (this.killWorkerOnError && workerId)){\r\n\t\t\t\t\treqOpts.body = (this.payload)?JSON.stringify(this.payload): JSON.stringify({\"workerId\": workerId});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor(let endpoint of _endpoint){\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tlet fetch: any = {};\r\n\t\t\t\t\t\tfetch = await BotHttp.fetch(endpoint, reqOpts);\r\n\t\t\t\t\t} catch (err) {\r\n\t\t\t\t\t\tBBLogger.error(err);\r\n\t\t\t\t\t\treject(err);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//Send an email\r\n\t\t\tif (this.sendEmail && this.emailMsgOpts && this.emailServiceOpts) {\r\n\t\t\t\tHttpErrorHandler.mailService = new NodeMailer();\r\n\t\t\t\tthis.emailMsgOpts.subject = (!this.emailMsgOpts.subject || this.emailMsgOpts.subject.length === 0 )? `A new ${EErrorType[this.type] || \"Unknown\"} error has been received | ${message}`: this.emailMsgOpts.subject;\r\n\t\t\t\tthis.emailMsgOpts.text =(!this.emailMsgOpts.text || this.emailMsgOpts.text.length === 0 )?`${new Date().toLocaleDateString()} : \\n Code: ${code} \\n Message: ${message}`: this.emailMsgOpts.text;\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tawait HttpErrorHandler.mailService.sendEmail(this.emailMsgOpts, this.emailServiceOpts);\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\tBBLogger.error(err);\r\n\t\t\t\t\treject(err);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tresolve();\r\n\t\t});\r\n\t}\r\n\r\n\tconstructor(\r\n\t\ttype: EErrorType,\r\n\t\tsendEmail?: boolean,\r\n\t\tendpoint?: string[]|string,\r\n\t\temailServiceOpts?: IServiceOptions,\r\n\t\temailMsgOpts?: IMessageOptions\r\n\t) {\r\n\t\tlet msgOpts: IMessageOptions = <IMessageOptions>{};\r\n\t\tmsgOpts.to = HttpErrorHandler.defaultErrMsgRecipient;\r\n\t\tthis.type = EErrorType[type];\r\n\t\tthis.sendEmail = sendEmail || false;\r\n\t\tthis.endpoint = (Array.isArray(endpoint))?<string[]>endpoint:<string[]>new Array(endpoint);\r\n\t\tthis.emailServiceOpts = HttpErrorHandler.defaultEmailServiceOpts;\r\n\r\n\t\tif(emailServiceOpts && typeof emailServiceOpts.auth === \"object\"){\r\n\t\t\tthis.emailServiceOpts = new ServiceOptions(emailServiceOpts);\r\n\t\t}\r\n\t\tthis.emailMsgOpts = emailMsgOpts || msgOpts;\r\n\t}\r\n}"]}