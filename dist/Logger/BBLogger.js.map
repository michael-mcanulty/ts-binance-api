{"version":3,"file":"BBLogger.js","sourceRoot":"","sources":["../../src/Logger/BBLogger.ts"],"names":[],"mappings":";;AAAA,yBAAyB;AACzB,6BAA6B;AAE7B,MAAa,QAAQ;IAwHpB;IACA,CAAC;IAnHM,MAAM,KAAK,QAAQ;QACzB,OAAO,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,CAAC;IACxD,CAAC;IAEO,MAAM,CAAC,WAAW;QACzB,IAAI,OAAO,GAAW,EAAE,CAAC;QACzB,IAAI,OAAO,GAAa,OAAO,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtD,IAAI,WAAW,GAAW,QAAQ,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACjE,IAAI,WAAW,IAAI,CAAC,EAAE;YACrB,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;SAC/B;QACD,OAAO,OAAO,CAAC;IAChB,CAAC;IAEO,MAAM,CAAC,YAAY,CAAC,IAAY;QACvC,OAAO,GAAG,QAAQ,CAAC,QAAQ,IAAI,IAAI,MAAM,CAAC;IAC3C,CAAC;IAEO,MAAM,CAAC,OAAO,CAAC,GAAW;QACjC,OAAO,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,OAAO,QAAQ,CAAC,WAAW,EAAE,OAAO,GAAG,OAAO,CAAC;IACrG,CAAC;IAEO,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,QAAgB,EAAE,GAAW;QAC9D,IAAI;YACH,IAAI,GAAG,EAAE;gBACR,MAAM,QAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;gBACtC,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE;oBACpD,IAAI,GAAG,EAAE;wBACR,MAAM,GAAG,CAAC;qBACV;yBAAM;wBACN,OAAO;qBACP;gBACF,CAAC,CAAC,CAAC;aACH;iBAAM;gBACN,OAAO;aACP;SACD;QAAC,OAAO,GAAG,EAAE;YACb,MAAM,GAAG,CAAC;SACV;IACF,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAW,EAAE,QAAiB,KAAK;QAC5D,IAAI;YACH,IAAI,IAAI,GAAW,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC;YACvC,IAAI,QAAQ,GAAW,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YACnD,IAAI,OAAO,GAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC5D,MAAM,QAAQ,CAAC,YAAY,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;SAC/C;QAAC,OAAO,GAAG,EAAE;YACb,MAAM,GAAG,CAAC;SACV;IACF,CAAC;IAEM,MAAM,CAAC,aAAa,CAAC,GAAa,EAAE,WAAmB;QAC7D,IAAI,GAAG,GAAW,CAAC,CAAC,CAAC;QACrB,IAAI,OAAO,GAAY,GAAG,CAAC,IAAI,CAAC,CAAC,IAAY,EAAE,KAAa,EAAE,EAAE;YAC/D,GAAG,GAAG,KAAK,CAAC;YACZ,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;IACZ,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAW,EAAE,QAAiB,KAAK;QAC3D,IAAI;YACH,IAAI,IAAI,GAAW,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;YACtC,IAAI,QAAQ,GAAW,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YACnD,IAAI,OAAO,GAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC5D,MAAM,QAAQ,CAAC,YAAY,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;SAC/C;QAAC,OAAO,GAAG,EAAE;YACb,MAAM,GAAG,CAAC;SACV;IACF,CAAC;IAEO,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,QAAgB;QACjD,IAAI;YACH,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;gBAC3C,IAAI,GAAG,EAAE;oBACR,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;iBAC3B;qBAAM;oBACN,IAAI,KAAK,GAAa,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBACvC,IAAI,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC,SAAS,EAAE;wBACtC,IAAI,IAAI,GAAW,QAAQ,CAAC,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC;wBACrD,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE;4BAC5E,IAAI,GAAG,EAAE;gCACR,MAAM,GAAG,CAAC;6BACV;iCAAM;gCACN,OAAO;6BACP;wBACF,CAAC,CAAC,CAAC;qBACH;yBAAM;wBACN,OAAO;qBACP;iBACD;YACF,CAAC,CAAC,CAAC;SACH;QAAC,OAAO,GAAG,EAAE;YACb,MAAM,GAAG,CAAC;SACV;IACF,CAAC;IAEO,MAAM,CAAC,QAAQ,CAAC,IAAW;QAClC,IAAI,KAAK,GAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC;QAC7C,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC,iBAAiB,EAAE,GAAG,KAAK,CAAC,CAAC;IAC3E,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,GAAW,EAAE,QAAiB,KAAK;QAC9D,IAAI;YACH,IAAI,IAAI,GAAW,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;YACzC,IAAI,QAAQ,GAAW,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YACnD,IAAI,OAAO,GAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC5D,MAAM,QAAQ,CAAC,YAAY,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;SAC/C;QAAC,OAAO,GAAG,EAAE;YACb,MAAM,GAAG,CAAC;SACV;IACF,CAAC;;AApHc,cAAK,GAAW,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5C,iBAAQ,GAAW,GAAG,QAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,WAAW,EAAE,OAAO,CAAC;AACvE,kBAAS,GAAW,GAAG,CAAC;AAJvC,4BA0HC","sourcesContent":["import * as fs from \"fs\";\r\nimport * as path from \"path\";\r\n\r\nexport class BBLogger {\r\n\tprivate static _INSTANCE: BBLogger;\r\n\tprivate static _base: string = path.dirname(process.cwd());\r\n\tprivate static _dirBase: string = `${BBLogger._base}/${BBLogger._getAppName()}/logs`;\r\n\tpublic static lineLimit: number = 600;\r\n\r\n\tpublic static get Instance() {\r\n\t\treturn this._INSTANCE || (this._INSTANCE = new this());\r\n\t}\r\n\r\n\tprivate static _getAppName(): string {\r\n\t\tlet appName: string = \"\";\r\n\t\tlet pathArr: string[] = process.cwd().split(path.sep);\r\n\t\tlet idxContains: number = BBLogger.indexContains(pathArr, \"bb-\");\r\n\t\tif (idxContains >= 0) {\r\n\t\t\tappName = pathArr[idxContains];\r\n\t\t}\r\n\t\treturn appName;\r\n\t}\r\n\r\n\tprivate static _getFilename(name: string) {\r\n\t\treturn `${BBLogger._dirBase}/${name}.txt`;\r\n\t}\r\n\r\n\tprivate static _getMsg(msg: string): string {\r\n\t\treturn `${BBLogger.utcToPST(new Date()).toISOString()} at ${BBLogger._getAppName()} \\n ${msg} \\r\\n`;\r\n\t}\r\n\r\n\tprivate static async _writeToFile(filename: string, msg: string): Promise<void> {\r\n\t\ttry {\r\n\t\t\tif (msg) {\r\n\t\t\t\tawait BBLogger.limitedLines(filename);\r\n\t\t\t\tfs.appendFile(filename, BBLogger._getMsg(msg), err => {\r\n\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\tthrow err;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static async error(msg: string, plain: boolean = false): Promise<void> {\r\n\t\ttry {\r\n\t\t\tlet name: string = BBLogger.error.name;\r\n\t\t\tlet filename: string = BBLogger._getFilename(name);\r\n\t\t\tlet message: string = (plain) ? msg : BBLogger._getMsg(msg);\r\n\t\t\tawait BBLogger._writeToFile(filename, message);\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static indexContains(arr: string[], strContains: string): number {\r\n\t\tlet idx: number = -1;\r\n\t\tlet hasSome: boolean = arr.some((item: string, index: number) => {\r\n\t\t\tidx = index;\r\n\t\t\treturn (item.indexOf(strContains) >= 0);\r\n\t\t});\r\n\t\treturn idx;\r\n\t}\r\n\r\n\tpublic static async info(msg: string, plain: boolean = false): Promise<void> {\r\n\t\ttry {\r\n\t\t\tlet name: string = BBLogger.info.name;\r\n\t\t\tlet filename: string = BBLogger._getFilename(name);\r\n\t\t\tlet message: string = (plain) ? msg : BBLogger._getMsg(msg);\r\n\t\t\tawait BBLogger._writeToFile(filename, message);\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static async limitedLines(filename: string): Promise<void> {\r\n\t\ttry {\r\n\t\t\tfs.readFile(filename, 'utf8', (err, data) => {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\treturn Promise.reject(err);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet lines: string[] = data.split('\\n');\r\n\t\t\t\t\tif (lines.length > BBLogger.lineLimit) {\r\n\t\t\t\t\t\tlet diff: number = BBLogger.lineLimit - lines.length;\r\n\t\t\t\t\t\tfs.writeFile(filename, lines.slice(diff, lines.length - 1).join('\\n'), err => {\r\n\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\tthrow err;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static utcToPST(date?: Date) {\r\n\t\tlet _date: Date = (date) ? date : new Date();\r\n\t\treturn new Date(_date.getTime() - new Date().getTimezoneOffset() * 60000);\r\n\t}\r\n\r\n\tpublic static async warning(msg: string, plain: boolean = false): Promise<void> {\r\n\t\ttry {\r\n\t\t\tlet name: string = BBLogger.warning.name;\r\n\t\t\tlet filename: string = BBLogger._getFilename(name);\r\n\t\t\tlet message: string = (plain) ? msg : BBLogger._getMsg(msg);\r\n\t\t\tawait BBLogger._writeToFile(filename, message);\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate constructor() {\r\n\t}\r\n}"]}