{"version":3,"file":"Logger.js","sourceRoot":"","sources":["../../src/Logger/Logger.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\nimport {WriteStream} from \"fs\";\nimport * as path from \"path\";\n\nexport class Logger {\n\tprivate static _INSTANCE: Logger;\n\tprivate static _base: string = path.dirname(process.cwd());\n\tprivate static _dirBase: string = `${Logger._base}/${Logger._getAppName()}/logs/`;\n\tprivate static _errorStreamPath: string = `${Logger._dirBase}/error.txt`;\n\tprivate static _infoStreamPath: string = `${Logger._dirBase}/info.txt`;\n\tprivate static _warningStreamPath: string = `${Logger._dirBase}/warning.txt`;\n\n\tpublic static get Instance() {\n\t\treturn this._INSTANCE || (this._INSTANCE = new this());\n\t}\n\n\tprivate static _getAppName(): string {\n\t\tlet appName: string = \"\";\n\t\tlet pathArr: string[] = process.cwd().split(path.sep);\n\t\tlet idxContains: number = Logger.indexContains(pathArr, \"bb-\");\n\t\tif (idxContains >= 0) {\n\t\t\tappName = pathArr[idxContains];\n\t\t}\n\t\treturn appName;\n\t}\n\n\tprivate static _getMsg(msg: string): string {\n\t\treturn `${Logger.utcToPST(new Date()).toISOString()} at ${Logger._getAppName()} \\n ${msg} \\r\\n`;\n\t}\n\n\tpublic static error(msg: string) {\n\t\tlet logStream: WriteStream = fs.createWriteStream(Logger._errorStreamPath, {flags: 'a'});\n\t\tlogStream.write(Logger._getMsg(msg), () => {\n\t\t\tlogStream.close();\n\t\t});\n\t}\n\n\tpublic static indexContains(arr: string[], strContains: string): number {\n\t\tlet idx: number = -1;\n\t\tlet hasSome: boolean = arr.some((item: string, index: number) => {\n\t\t\tidx = index;\n\t\t\treturn (item.indexOf(strContains) >= 0);\n\t\t});\n\t\treturn idx;\n\t}\n\n\tpublic static info(msg: string) {\n\t\tlet logStream: WriteStream = fs.createWriteStream(Logger._infoStreamPath, {flags: 'a'});\n\t\tlogStream.write(Logger._getMsg(msg), () => {\n\t\t\tlogStream.close();\n\t\t});\n\t}\n\n\tprivate static utcToPST(date?: Date) {\n\t\tlet _date: Date = (date) ? date : new Date();\n\t\treturn new Date(_date.getTime() - new Date().getTimezoneOffset() * 60000);\n\t}\n\n\tpublic static warning(msg: string) {\n\t\tlet logStream: WriteStream = fs.createWriteStream(Logger._warningStreamPath, {flags: 'a'});\n\t\tlogStream.write(Logger._getMsg(msg), () => {\n\t\t\tlogStream.close();\n\t\t});\n\t}\n\n\tprivate constructor() {\n\t}\n}"]}