{"version":3,"file":"Market.js","sourceRoot":"","sources":["../../src/Market/Market.ts"],"names":[],"mappings":";;AAOA,MAAa,MAAM;IAMX,MAAM,CAAC,0BAA0B,CAAC,MAAe;QACvD,IAAI,UAAU,GAA+C,MAAM,CAAC,OAAO,CAAC;QAC5E,IAAI,SAAS,GAAmB,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QACxE,IAAI,MAAM,GAAqB,EAAE,CAAC;QAClC,MAAM,CAAC,QAAQ,GAAG,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACjD,MAAM,CAAC,QAAQ,GAAG,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACjD,MAAM,CAAC,MAAM,GAAG,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC7C,MAAM,CAAC,MAAM,GAAG,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC7C,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QACvD,MAAM,CAAC,QAAQ,GAAG,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACjD,OAAO,MAAM,CAAC;IACf,CAAC;IAED,YAAY,MAAc,EAAE,SAAiB,EAAE,UAAkB,EAAE,MAAe;QACjF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACtB,CAAC;CACD;AAzBD,wBAyBC","sourcesContent":["import {ILimits} from \"../ExchangeInfo/Interfaces/ILimits\";\r\nimport {ISymbol} from \"../ExchangeInfo/Interfaces/ISymbol\";\r\nimport {IPriceFilter} from \"../ExchangeInfo/Interfaces/IPriceFilter\";\r\nimport {ILotSize} from \"../ExchangeInfo/Interfaces/ILotSize\";\r\nimport {IMinNotional} from \"../ExchangeInfo/Interfaces/IMinNotional\";\r\nimport {ILimitsBinance} from \"../ExchangeInfo/Interfaces/ILimitsBinance\";\r\n\r\nexport class Market {\r\n\tbaseAsset: string;\r\n\tlimits: ILimits;\r\n\tquoteAsset: string;\r\n\tsymbol: string;\r\n\r\n\tpublic static GetLimitsFromBinanceSymbol(symbol: ISymbol): ILimits {\r\n\t\tlet binFilters: (IPriceFilter | ILotSize | IMinNotional)[] = symbol.filters;\r\n\t\tlet mergedObj: ILimitsBinance = Object.assign.apply(Object, binFilters);\r\n\t\tlet limits: ILimits = <ILimits>{};\r\n\t\tlimits.maxPrice = parseFloat(mergedObj.maxPrice);\r\n\t\tlimits.minPrice = parseFloat(mergedObj.minPrice);\r\n\t\tlimits.maxQty = parseFloat(mergedObj.maxQty);\r\n\t\tlimits.minQty = parseFloat(mergedObj.minQty);\r\n\t\tlimits.minNotional = parseFloat(mergedObj.minNotional);\r\n\t\tlimits.stepSize = parseFloat(mergedObj.stepSize);\r\n\t\treturn limits;\r\n\t}\r\n\r\n\tconstructor(symbol: string, baseAsset: string, quoteAsset: string, limits: ILimits) {\r\n\t\tthis.symbol = symbol;\r\n\t\tthis.baseAsset = baseAsset;\r\n\t\tthis.quoteAsset = quoteAsset;\r\n\t\tthis.limits = limits;\r\n\t}\r\n}"]}