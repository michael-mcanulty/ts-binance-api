{
  "version": 3,
  "file": "Market.js",
  "sourceRoot": "",
  "sources": [
    "../../src/Market/Market.ts"
  ],
  "names": [],
  "mappings": ";;AAEA,6CAAwC;AAExC;IAQQ,MAAM,CAAC,YAAY,CAAC,QAAmB;QAC7C,EAAE,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACrC,IAAI,OAAO,GAAa,EAAE,CAAC;YAC3B,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;gBACrB,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,SAAS,EAAE,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;gBAC5F,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,OAAO,CAAC;QAChB,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,eAAM,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;QAC7C,CAAC;IACF,CAAC;IAEM,MAAM,CAAC,UAAU,CAAC,OAAiB;QACzC,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACnC,IAAI,QAAQ,GAAc,EAAE,CAAC;YAC7B,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBACnB,IAAI,MAAM,GAAY,EAAE,CAAC;gBACzB,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;gBACnB,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;gBACzB,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;gBACrB,MAAM,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC;gBAC/B,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,UAAU,CAAC;gBACjC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;gBACzB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACvB,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,QAAQ,CAAC;QACjB,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,MAAM,CAAC,EAAE,CAAC;QACX,CAAC;IACF,CAAC;IAED,YAAY,MAAc,EAAE,SAAiB,EAAE,UAAkB,EAAE,MAAe,EAAE,EAAW,EAAE,IAAW;QAC3G,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,EAAE,CAAC,CAAC,EAAE,CAAC;YAAC,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACtB,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACV,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAClB,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACxB,CAAC;IACF,CAAC;CACD;AApDD,wBAoDC",
  "sourcesContent": [
    "import {ILimits} from \"../Rest/Interfaces/IExchangeInfo\";\nimport {IMarket} from \"./interfaces/IMarket\";\nimport {Logger} from \"../Logger/Logger\";\n\nexport class Market {\n\t_id?: string;\n\tbaseAsset: string;\n\tdate?: Date;\n\tlimits: ILimits;\n\tquoteAsset: string;\n\tsymbol: string;\n\n\tpublic static fromDBFormat(imarkets: IMarket[]) {\n\t\tif (imarkets && imarkets.length > 0) {\n\t\t\tlet markets: Market[] = [];\n\t\t\timarkets.forEach(im => {\n\t\t\t\tlet market = new Market(im.symbol, im.baseAsset, im.quoteAsset, im.limits, im._id, im.date);\n\t\t\t\tmarkets.push(market);\n\t\t\t});\n\t\t\treturn markets;\n\t\t} else {\n\t\t\tLogger.error(\"Error retrieving the market\");\n\t\t}\n\t}\n\n\tpublic static toDBFormat(markets: Market[]) {\n\t\tif (markets && markets.length > 0) {\n\t\t\tlet imarkets: IMarket[] = [];\n\t\t\tmarkets.forEach(m => {\n\t\t\t\tlet market = <IMarket>{};\n\t\t\t\tmarket._id = m._id;\n\t\t\t\tmarket.symbol = m.symbol;\n\t\t\t\tmarket.date = m.date;\n\t\t\t\tmarket.baseAsset = m.baseAsset;\n\t\t\t\tmarket.quoteAsset = m.quoteAsset;\n\t\t\t\tmarket.limits = m.limits;\n\t\t\t\timarkets.push(market);\n\t\t\t});\n\t\t\treturn imarkets;\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tconstructor(symbol: string, baseAsset: string, quoteAsset: string, limits: ILimits, id?: string, date?: Date) {\n\t\tthis.symbol = symbol;\n\t\tthis.baseAsset = baseAsset;\n\t\tthis.quoteAsset = quoteAsset;\n\t\tthis.limits = limits;\n\t\tif (id) this._id = id;\n\t\tif (date) {\n\t\t\tthis.date = date;\n\t\t} else {\n\t\t\tthis.date = new Date();\n\t\t}\n\t}\n}"
  ]
}